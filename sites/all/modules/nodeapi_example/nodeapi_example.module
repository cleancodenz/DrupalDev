<?php 
function nodeapi_example_form_alter(&$form, $form_state, $form_id) {
	// First, check for the node type configuration form.
	if ($form_id == 'node_type_form') {
		// Alter the node type's configuration form to add our setting. We don't
		// need to worry about saving this value back to the variable, the form
		// we're altering will do it for us.
		$form['rating'] = array(
				'#type' => 'fieldset',
				'#title' => t('Rating settings'),
				'#collapsible' => TRUE,
				'#collapsed' => TRUE,
				'#group' => 'additional_settings',
				'#weight' => -1,
		);

		$form['rating']['nodeapi_example_node_type'] = array(
				'#type' => 'radios',
				'#title' => t('NodeAPI Example Rating'),
				'#default_value' => variable_get('nodeapi_example_node_type_' . $form['#node_type']->type, FALSE),
				'#options' => array(
						FALSE => t('Disabled'),
						TRUE => t('Enabled'),
				),
				'#description' => t('Should this node have a rating attached to it?'),
		);
	}
	// Here we check to see if the type and node field are set. If so, it could
	// be a node edit form.
	elseif (isset($form['type']) && isset($form['#node']) && $form['type']['#value'] . '_node_form' == $form_id) {
		// If the rating is enabled for this node type, we insert our control
		// into the form.
		$node = $form['#node'];
		if (variable_get('nodeapi_example_node_type_' . $form['type']['#value'], FALSE)) {
			$form['nodeapi_example_rating'] = array(
					'#type' => 'select',
					'#title' => t('Rating'),
					'#default_value' => isset($node->nodeapi_example_rating) ? $node->nodeapi_example_rating : '',
					'#options' => array(0 => t('Unrated'), 1, 2, 3, 4, 5),
					'#required' => TRUE,
					'#weight' => 0,
			);
		}
	}
}


function nodeapi_example_node_delete($node) {
	// Notice that we're deleting even if the content type has no rating enabled.
	db_delete('nodeapi_example')
	->condition('nid', $node->nid)
	->execute();
}

function nodeapi_example_node_insert($node) {
	if (variable_get('nodeapi_example_node_type_' . $node->type, FALSE)) {
		// Notice that we are ignoring any revision information using $node->nid
		db_insert('nodeapi_example')
		->fields(array(
				'nid' => $node->nid,
				'vid' => $node->vid,
				'rating' => $node->nodeapi_example_rating,
		))
		->execute();
	}
}


function nodeapi_example_node_load($nodes, $types) {
	// We can use $types to figure out if we need to process any of these nodes.
	$our_types = array();
	foreach ($types as $type) {
		if (variable_get('nodeapi_example_node_type_' . $type, FALSE)) {
			$our_types[] = $type;
		}
	}

	// Now $our_types contains all the types from $types that we want
	// to deal with. If it's empty, we can safely return.
	if (!count($our_types)) {
		return;
	}

	// Now we need to make a list of revisions based on $our_types
	foreach ($nodes as $node) {
		// We are using the revision id instead of node id.
		if (variable_get('nodeapi_example_node_type_' . $node->type, FALSE)) {
			$vids[] = $node->vid;
		}
	}
	// Check if we should load rating for any of the nodes.
	if (!isset($vids) || !count($vids)) {
		return;
	}

	// When we read, we don't care about the node->nid; we look for the right
	// revision ID (node->vid).
	$result = db_select('nodeapi_example', 'e')
	->fields('e', array('nid', 'vid', 'rating'))
	->where('e.vid IN (:vids)', array(':vids' => $vids))
	->execute();

	foreach ($result as $record) {
		$nodes[$record->nid]->nodeapi_example_rating = $record->rating;
	}
}

function nodeapi_example_node_update($node) {
	if (variable_get('nodeapi_example_node_type_' . $node->type, FALSE)) {
		// Check first if this node has a saved rating.
		$rating = db_select('nodeapi_example', 'e')
		->fields('e', array(
				'rating',
		))
		->where('e.vid = (:vid)', array(':vid' => $node->vid))
		->execute()->fetchField();

		if ($rating) {
			// Node has been rated before.
			db_update('nodeapi_example')
			->fields(array('rating' => $node->nodeapi_example_rating))
			->condition('vid', $node->vid)
			->execute();
		}
		else {
			// Node was not previously rated, so insert a new rating in database.
			nodeapi_example_node_insert($node);
		}
	}
}

function nodeapi_example_node_validate($node, $form) {
	if (variable_get('nodeapi_example_node_type_' . $node->type, FALSE)) {
		if (isset($node->nodeapi_example_rating) && !$node->nodeapi_example_rating) {
			form_set_error('nodeapi_example_rating', t('You must rate this content.'));
		}
	}
}

function nodeapi_example_node_view($node, $build_mode = 'full') {
	if (variable_get('nodeapi_example_node_type_' . $node->type, FALSE)) {
		// Make sure to set a rating, also for nodes saved previously and not yet rated.
		$rating = isset($node->nodeapi_example_rating) ? $node->nodeapi_example_rating : 0;
		$node->content['nodeapi_example'] = array(
				'#markup' => theme('nodeapi_example_rating', array('rating' => $rating)),
				'#weight' => -1,
		);
	}
}




function nodeapi_example_theme() {
	return array(
			'nodeapi_example_rating' => array(
					'variables' => array('rating' => NULL),
			),
	);
}




function theme_nodeapi_example_rating($variables) {
	$options = array(
			0 => t('Unrated'),
			1 => t('Poor'),
			2 => t('Needs improvement'),
			3 => t('Acceptable'),
			4 => t('Good'),
			5 => t('Excellent'),
	);
	$output = '<div class="nodeapi_example_rating">';
	$output .= t('Rating: %rating', array('%rating' => $options[(int) $variables['rating']]));
	$output .= '</div>';
	return $output;
}


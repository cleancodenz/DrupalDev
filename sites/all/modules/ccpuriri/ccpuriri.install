<?php 

require_once (dirname(__FILE__) . '/ccpuriri.menusetup.inc');




/**
 * Implements hook_schema().
 */
function ccpuriri_schema() {
  // the cache table
  $schema['cache_ccpuriri'] = drupal_get_schema_unprocessed('system', 'cache');

  return $schema;
}

/**
 * Implementation of hook_install().
 */
function ccpuriri_install() {

  // Menu operations
  /**
  //create custome menu blocks, like secondary top etc
  _ccpuriri_menu_blocks_custom_add();
  
  //add home to ccpuriri main menu
  _ccpuriri_menu_home_add();
  
  
  //add list related menu items to ccpuriri main menu
  _ccpuriri_menu_list_add();
  
  //add rental related menu items to ccpuriri main menu
  _ccpuriri_menu_rental_add();
  **/
  
  // End of menu operations
  
  // setup rental role and permissions, all previously
  // signed up users will be given rental create permission by this function
  // new signed up users will automatically have rental create permission
  _ccpuriri_rental_permission_setup();
  
  // add fields
  
  // create address field, add an address field instance to user
  _ccpuriri_field_addressfield_add();
  
  // create contact field, add a contact field instance to user
  _ccpuriri_field_contactfield_add();
  
  // create longtext field
  _ccpuriri_field_longtext_add();
  
  // add instances
  
  //add address field instance to rental
  _ccpuriri_field_addressfield_rental_add();
  
  // add contact field instance to rental
  _ccpuriri_field_contactfield_rental_add();
  
  // add description field instance to rental type
  _ccpuriri_field_description_rental_add();
  
  

}

/**
 * Implementation of hook_uninstall().
 */
function ccpuriri_uninstall() {

  // remove instances
  
  //remove address field instance to rental
  _ccpuriri_field_addressfield_rental_remove();
  
  //remove contact field instance to rental
  _ccpuriri_field_contactfield_rental_remove();
  
  //remove description field instance to rental type
  _ccpuriri_field_description_rental_remove();
  
  // remove fields
  
  // remove address field and all its instance data
  _ccpuriri_field_addressfield_remove();
  
  // remove contact field and all its instance data
  _ccpuriri_field_contactfield_remove();
  
  // remove longtext field
  _ccpuriri_field_longtext_remove();
  
  // Menu operations
  /**
  // remove menus
  
  //delete custome menu blocks, like secondary top etc
  _ccpuriri_menu_blocks_custom_remove();
  
  
  // delete menu items from system main menu
  _ccpuriri_menu_main_remove_items();
  **/
  //End of menu operations
  
  // remove permission and roles
  
  // delete rental role and permissions
  _ccpuriri_rental_permission_dispose();
  

}



/**
 * Implementation of hook_enable().
 */
function ccpuriri_enable() {
 
  // Menu operations
  
  //create custome menu blocks, like secondary top etc
  _ccpuriri_menu_blocks_custom_add();
  
  //add home to ccpuriri main menu
  _ccpuriri_menu_home_add();
  
  
  //add list related menu items to ccpuriri main menu
  _ccpuriri_menu_list_add();
  
  //add rental related menu items to ccpuriri main menu
  _ccpuriri_menu_rental_add();
  
  // End of menu operations
  
   
}

/**
 * Implementation of hook_disable().
 */
function ccpuriri_disable() {
  
  // Menu operations
  // remove menus
  
  //delete custome menu blocks, like secondary top etc
  _ccpuriri_menu_blocks_custom_remove();
  
  
  // delete menu items from system main menu
  _ccpuriri_menu_main_remove_items();
  
  //End of menu operations
  
  
  
}




/*
 * Module setup functions
* */
/*
 * Add addressfield to user
* */
function  _ccpuriri_field_addressfield_add()
{
  $startTime=  microtime(TRUE);

  // create addressfield
  // to clear the cache to include the field type defined in this module

  _field_info_collate_types(true);

  $fieldname = 'field_ccpuriri_addressfield';
  $field = field_read_field($fieldname, array('include_inactive' => TRUE));

  if (empty($field)) {

    $field = array(
        'field_name' => $fieldname,
        'type' => 'ccpuriri_addressfield',
        // 'entity_types' => array('user'), // do not limit entity types using this field

    );

    field_create_field($field);

     

    // Create the instance if needed.
    // add the field to user, with some widget settings
    if (!field_read_instance('user', $fieldname , 'user', array('include_inactive' => TRUE))) {

      field_attach_create_bundle('user', 'user');

      $settings= array(
          'showname'=> false,
          'showorganization' => false,
      );

      $instance = array(
          'field_name' => $fieldname,
          'label' => 'Address',
          'entity_type' => 'user',
          'widget' => array('settings'=> $settings),
          'bundle' => 'user',
      );
      field_create_instance($instance);
    }


    watchdog('ccpuriri',
        'field_ccpuriri_addressfield is added, time elapsed is %timeElpased ms',
        array('%timeElpased' =>
            round((microtime(TRUE) - $startTime) * 1000,2)

        ),
        WATCHDOG_DEBUG);

  }

}


/*
 * Add addressfield to rental
* This does not have matching removing func, as it is included in field delete which is done in unsinatll
*
* */
function  _ccpuriri_field_addressfield_rental_add()
{
  $startTime=  microtime(TRUE);


  _field_info_collate_types(true);

  $fieldname = 'field_ccpuriri_addressfield';
  $field = field_read_field($fieldname, array('include_inactive' => TRUE));


  // add the field to rental
  if (!empty($field) && !field_read_instance('node', $fieldname , 'ccpuriri_rental', array('include_inactive' => TRUE))) {

    $settings= array(
        'showname'=> false,
        'showorganization' => false,
    );

    $instance = array(
        'field_name' => $fieldname,
        'label' => 'Address',
        'entity_type' => 'node',
        'widget' => array('settings'=> $settings),
        'bundle' => 'ccpuriri_rental',
        //default settings to avoid everytime to make these changes from UI
        'display'=> array(
            // display address in list view
            'ccpuriri_rental_list_view'=>array(
                'label' => 'hidden',
                'type' => 'ccpuriri_addressfield_subandstreet',
            ),
        ),
    );

    field_create_instance($instance);

    watchdog('ccpuriri',
        'field_ccpuriri_addressfield is added to rental type, time elapsed is %timeElpased ms',
        array('%timeElpased' =>
            round((microtime(TRUE) - $startTime) * 1000,2)

        ),
        WATCHDOG_DEBUG);

  }

}


/*
 * Add plainlongtext field instance
*
* */
function  _ccpuriri_field_longtext_add()
{
  $startTime=  microtime(TRUE);

  // create addressfield
  // to clear the cache to include the field type defined in this module

  _field_info_collate_types(true);

  $fieldname = 'field_ccpuriri_longtext';
  $field = field_read_field($fieldname, array('include_inactive' => TRUE));

  if (empty($field)) {

    $field = array(
        'field_name' => $fieldname,
        'type' => 'text_long',
        // 'entity_types' => array('user'), // do not limit entity types using this field

    );

    field_create_field($field);

    watchdog('ccpuriri',
        'field_ccpuriri_longtext is added, time elapsed is %timeElpased ms',
        array('%timeElpased' =>
            round((microtime(TRUE) - $startTime) * 1000,2)

        ),
        WATCHDOG_DEBUG);

  }

}


/*
 * Remove the longtext field
* */
function _ccpuriri_field_longtext_remove(){

  $startTime=  microtime(TRUE);

  //delete the field
  field_delete_field('field_ccpuriri_longtext');

  //Purge field data now to allow module to be reinstalled
  //if this is the only field remaining.
  field_purge_batch(10);

  watchdog('ccpuriri',
      'field_ccpuriri_longtext is deleted, time elapsed is %timeElpased ms',
      array('%timeElpased' =>
          round((microtime(TRUE) - $startTime) * 1000,2)

      ),
      WATCHDOG_DEBUG);


}


/*
 *Remove the address field from rental type
* this will remove instance entry in field_config_instance
* and it will remove any user data of this instance in field_data_body
* they are not removed straight away but marked as deleted,
* they will be permanantly removed after cron run
* Reinstall of the field does not bring data back even if they are still not purged
* */
function  _ccpuriri_field_addressfield_rental_remove()
{
  // field name
  $fieldname = 'field_ccpuriri_addressfield';

  $instance = field_info_instance('node', $fieldname, 'ccpuriri_rental');

  if (!empty($instance))
  {
    $startTime=  microtime(TRUE);

    // delete this instace
    // field clean up is false, as in module uninstall the field will be deleted
    // the data only marked as delete, run cron to purge the field instance data
    field_delete_instance($instance, false) ;

    watchdog('ccpuriri',
        'field_ccpuriri_addressfield in ccpuriri rental bundle is marked for delete, time elapsed is %timeElpased ms',
        array('%timeElpased' =>
            round((microtime(TRUE) - $startTime) * 1000,2)

        ),
        WATCHDOG_DEBUG);
  }
}


/*
 * Add contact field to user
* */
function   _ccpuriri_field_contactfield_add()
{

  $startTime=  microtime(TRUE);
  // create contactfield
  // to clear the cache to include the field type defined in this module

  _field_info_collate_types(true);

  $fieldname = 'field_ccpuriri_contactfield';
  $field = field_read_field($fieldname, array('include_inactive' => TRUE));

  if (empty($field)) {

    $field = array(
        'field_name' => $fieldname,
        'type' => 'ccpuriri_contactfield',
        // 'entity_types' => array('user'), // do not limit entity types using this field

        'cardinality' => FIELD_CARDINALITY_UNLIMITED,
         
    );

    field_create_field($field);

    // Create the instance if needed.
    // add the field to user, with some widget settings
    if (!field_read_instance('user', $fieldname , 'user', array('include_inactive' => TRUE))) {

      field_attach_create_bundle('user', 'user');

      $settings= array();

      $instance = array(
          'field_name' => $fieldname,
          'label' => 'Contacts',
          'entity_type' => 'user',
          'widget' => array('settings'=> $settings),
          'bundle' => 'user',
      );
      field_create_instance($instance);
    }

    watchdog('ccpuriri',
        'field_ccpuriri_contactfield is added, time elapsed is %timeElpased ms',
        array('%timeElpased' =>
            round((microtime(TRUE) - $startTime) * 1000,2)

        ),
        WATCHDOG_DEBUG);

  }

}


/*
 * Add contact field to rental
* This does not have matching removing func, as it is included in field delete which is done in unsinatll
* */
function _ccpuriri_field_contactfield_rental_add()
{

  $startTime=  microtime(TRUE);
  // create contactfield
  // to clear the cache to include the field type defined in this module

  _field_info_collate_types(true);

  $fieldname = 'field_ccpuriri_contactfield';
  $field = field_read_field($fieldname, array('include_inactive' => TRUE));

  if (!empty($field)) {

    // add to rental
    if (!field_read_instance('node', $fieldname , 'ccpuriri_rental', array('include_inactive' => TRUE))) {


      $settings= array();

      $instance = array(
          'field_name' => $fieldname,
          'label' => 'Contacts',
          'entity_type' => 'node',
          'widget' => array('settings'=> $settings),
          'bundle' => 'ccpuriri_rental',
      );
      field_create_instance($instance);
    }

    watchdog('ccpuriri',
        'field_ccpuriri_contactfield is added, time elapsed is %timeElpased ms',
        array('%timeElpased' =>
            round((microtime(TRUE) - $startTime) * 1000,2)

        ),
        WATCHDOG_DEBUG);

  }

}

/*
 *Remove the contact field from rental type
* this will remove instance entry in field_config_instance
* and it will remove any user data of this instance in field_data_body
* they are not removed straight away but marked as deleted,
* they will be permanantly removed after cron run
* Reinstall of the field does not bring data back even if they are still not purged
* */
function _ccpuriri_field_contactfield_rental_remove()
{
  // field name
  $fieldname = 'field_ccpuriri_contactfield';

  $instance = field_info_instance('node', $fieldname, 'ccpuriri_rental');

  if (!empty($instance))
  {
    $startTime=  microtime(TRUE);

    // delete this instace
    // field clean up is false, as in module uninstall the field will be deleted
    // the data only marked as delete, run cron to purge the field instance data
    field_delete_instance($instance, false) ;

    watchdog('ccpuriri',
        'field_ccpuriri_contactfield in ccpuriri rental bundle is marked for delete, time elapsed is %timeElpased ms',
        array('%timeElpased' =>
            round((microtime(TRUE) - $startTime) * 1000,2)

        ),
        WATCHDOG_DEBUG);
  }
}



/*
 * Add menu blocks
* */
function _ccpuriri_menu_blocks_custom_add(){

  $startTime=  microtime(TRUE);
  // 1. create a custom menu for header-right, login/register etc
  $secondarymenu = array(
      'menu_name' => 'secondary_top',
      'title' => 'Top Secondary',
      'description' => 'Top level secondary menu',
  );

  menu_save($secondarymenu);

  watchdog('ccpuriri',
      'secondary_top menu block is added, time elapsed is %timeElpased ms',
      array('%timeElpased' =>
          round((microtime(TRUE) - $startTime) * 1000,2)

      ),
      WATCHDOG_DEBUG);


 
  $startTime=  microtime(TRUE);
 

  //2. create ccpuririmainnavigation
  //This is left side menu
  //It will be switched on by navigation block CCPuriri Navigation when no specific menu block is required



  $ccpuririmainnavigationmenu = array(
      'menu_name' => 'ccpuririmainnavigation',
      'title' => 'CCPuriri Main Navigation-not to be added to sidebar',
      'description' => 'CCPuriri Main Navigation menu, do not add this to regions, as it is displayed by CCPuriri Navigation block',
  );

  menu_save($ccpuririmainnavigationmenu);

  watchdog('ccpuriri',
      'ccpuririmainnavigation menu block is added, time elapsed is %timeElpased ms',
      array('%timeElpased' =>
          round((microtime(TRUE) - $startTime) * 1000,2)

      ),
      WATCHDOG_DEBUG);

  // Create a menu link for user/% in usernavigation menu.
  /*
  $menu_item = array(
      'menu_name' => 'secondary_top',
      'weight' => 10,
      'link_title' => 'My Account',
      'link_path' => 'user/%',
      'expanded' => true,
  );

  menu_link_save($menu_item);
  */
  // add ccpuriri navigation block to side bar first
  /*
  db_update('block')
  ->fields(array(
      'status' => 1,
      'weight' => -15,
      'region' => 'sidebar_first',
  ))
  ->condition('module', 'ccpuriri')
  ->condition('delta','navigation')
  ->condition('theme', 'bootstrapcc')
  ->execute();
  */


}

/*
 * Module teardown functions
* */

/*
 * Remove the address field
* */
function  _ccpuriri_field_addressfield_remove(){

  $startTime=  microtime(TRUE);
  //delete the field
  field_delete_field('field_ccpuriri_addressfield');

  //Purge field data now to allow module to be reinstalled
  //if this is the only field remaining.
  field_purge_batch(10);

  watchdog('ccpuriri',
      'field_ccpuriri_addressfield is deleted, time elapsed is %timeElpased ms',
      array('%timeElpased' =>
          round((microtime(TRUE) - $startTime) * 1000,2)

      ),
      WATCHDOG_DEBUG);


}

/*
 * Remove the contact field
* */
function  _ccpuriri_field_contactfield_remove(){

  $startTime=  microtime(TRUE);

  //delete the field
  field_delete_field('field_ccpuriri_contactfield');

  //Purge field data now to allow module to be reinstalled
  //if this is the only field remaining.
  field_purge_batch(10);

  watchdog('ccpuriri',
      'field_ccpuriri_contactfield is deleted, time elapsed is %timeElpased ms',
      array('%timeElpased' =>
          round((microtime(TRUE) - $startTime) * 1000,2)

      ),
      WATCHDOG_DEBUG);

}
/*
 * Remove the menu blocks
* */
function  _ccpuriri_menu_blocks_custom_remove(){

  $startTime=  microtime(TRUE);
  // 1. delete custom menu
  $secondarymenu = array(
      'menu_name' => 'secondary_top',
  );

  menu_delete($secondarymenu);

  
  
  //2 delete ccpuriri main menu
  $ccpuririmainnavigation = array(
      'menu_name' => 'ccpuririmainnavigation',
  );

  menu_delete($ccpuririmainnavigation);

  watchdog('ccpuriri',
      'Menu blocks are deleted, time elapsed is %timeElpased ms',
      array('%timeElpased' =>
          round((microtime(TRUE) - $startTime) * 1000,2)

      ),
      WATCHDOG_DEBUG);


}




/*
 * Add item to ccpuriri main menu
* it is visible only when user is logged in
*
* */
function _ccpuriri_menu_main_remove_items(){

  $startTime=  microtime(TRUE);

  $menuname= "ccpuririmainnavigation";

 

  //delete * from ccpuririmainnavigation
  $delete_query = db_delete('menu_links')
  ->condition('menu_name', $menuname);
 

  $records = $delete_query->execute();

  

  watchdog('ccpuriri',
      'ccpuririmainnavigation Menu links are removed, time elapsed is %timeElpased ms',
      array('%timeElpased' =>
          round((microtime(TRUE) - $startTime) * 1000,2)

      ),
      WATCHDOG_DEBUG);

}


/*
 * it has to be in main module, compared in rental module
* where the node type has not be created in module enable or disable
*set up a particular role 'CCPuriri rental standard user' for rental type
* set up permissions for 'CCPuriri rental standard user'
* assign this role to all existing users exectept admin
*
*
* */
function _ccpuriri_rental_permission_setup()
{
  // create role :'CCPuriri rental standard user'

  // role id keyed key value array, value is role name
  $roles = user_roles();

  $key = array_search('CCPuriri rental standard user',$roles);


  if(!$key)
  {
    // add the standard role
    $standardRole= new stdClass();
    $standardRole->name = 'CCPuriri rental standard user';

    user_role_save($standardRole);

  }


  //refresh

  $roles = user_roles();

  $key = array_search('CCPuriri rental standard user',$roles);

  if($key)
  {
    // set up the permissions for 'CCPuriri rental standard user'
    // do not call module_invoke_all('permission') as current content type has not been added yet

    $type = 'ccpuriri_rental';

    $permissionsToAdd =array();

    // add create $type content, ccpuriri_rental
    $permissionsToAdd[] = "create $type content";


    // add edit own $type content,  ccpuriri_rental
    $permissionsToAdd[] = "edit own $type content";

    // add delete own $type content, ccpuriri_rental
    $permissionsToAdd[] = "delete own $type content";


    user_role_grant_permissions($key, $permissionsToAdd);

    // add all existing users except admin to this role,
    $result = db_select('users')
    ->fields('users', array('uid'))
    ->condition('uid', 1,'>') // only all users except admin
    ->execute();

    $query = db_insert('users_roles')->fields(array('uid', 'rid'));

    foreach ($result as $item) {

      $query->values(array(
          'uid' => $item->uid,
          'rid' => $key,
      ));

    }

    $query->execute();

  }

}

/**
 * remove users for role  'CCPuriri rental standard user'
 * remove permissions for role 'CCPuriri rental standard user'
 * remove role itself
 *
 * */
function _ccpuriri_rental_permission_dispose()
{

  //delete the role
  // role id keyed key value array, value is role name
  $roles = user_roles();
  // if not found it returns false, otherwise the key
  $key = array_search('CCPuriri rental standard user',$roles);

  if($key)
  {
    //delete role
    user_role_delete($key);

  }
}

/*
 * add the description instance to rental type, it is in main module install
* and removing of longtext is in module uninstall, as it will invovle the the data loss
* this will add an entry in field_config_instance
* */
function _ccpuriri_field_description_rental_add()
{
  
  $startTime=  microtime(TRUE);
    
  _field_info_collate_types(true);
  
  $fieldname = 'field_ccpuriri_longtext';
  
  $field = field_read_field($fieldname, array('include_inactive' => TRUE));
  
  // add the field to rental
  if (!empty($field) && !field_read_instance('node', $fieldname , 'ccpuriri_rental', array('include_inactive' => TRUE))) {
  
    $instance = array(
        'field_name' => $fieldname,
        'label' => 'Description', // description instance
        'entity_type' => 'node',
        'widget' => array(
            'type' => 'ccpuriri_common_plain_text', // using our plain text widget
            'settings'=> array(
                'filter_format'=>'plain_text',
                'rows' =>10,
                ),
            ),
        'bundle' => 'ccpuriri_rental',
        //default settings to avoid everytime to make these changes from UI
        'display'=> array(
            // display trimmed in list view
            'ccpuriri_rental_list_view'=>array(
                'label' => 'hidden',
                'type' => 'ccpuriri_common_longtext_trimmed',
                'settings' => array('trim_length' => 220), //override formatter settings
            ),
            // display full  in default
            'default'=>array(
                'label'=> 'above',
                'type' => 'ccpuriri_common_longtext_full',
            ),
            
        ),
    );
    
    field_create_instance($instance);
  
    watchdog('ccpuriri',
        'field_ccpuriri_longtext is added to rental type, time elapsed is %timeElpased ms',
        array('%timeElpased' =>
            round((microtime(TRUE) - $startTime) * 1000,2)
  
        ),
        WATCHDOG_DEBUG);
  
  }

}

/*
 * remove the description field of rental type
* and removing of description is in module uninstall, as it will invovle the the data loss
* this will remove instance entry in field_config_instance
* and it will remove any user data in field_data_body
* not straight away, but after cron run
* */
function _ccpuriri_field_description_rental_remove()
{
  // field name
  $fieldname = 'field_ccpuriri_longtext';
  
  $instance = field_info_instance('node', $fieldname, 'ccpuriri_rental');
  
  if (!empty($instance))
  {
    $startTime=  microtime(TRUE);
  
    // delete this instace
    // field clean up is false, as in module uninstall the field will be deleted
    // the data only marked as delete, run cron to purge the field instance data
    field_delete_instance($instance, false) ;
  
    watchdog('ccpuriri',
        'field_ccpuriri_longtext in ccpuriri rental bundle is marked for delete, time elapsed is %timeElpased ms',
        array('%timeElpased' =>
            round((microtime(TRUE) - $startTime) * 1000,2)
  
        ),
        WATCHDOG_DEBUG);
  }
  
}

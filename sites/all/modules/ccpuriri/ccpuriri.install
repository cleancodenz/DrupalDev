<?php 
/**
 * @file
 *  Install, update and uninstall functions for the ccpuriri module.
 */

/**
 * Implementation of hook_install().
 */
function ccpuriri_install() {

  _ccpuriri_add_custom_menu();

  // add address field
  _ccpuriri_add_addressfield() ;

  // add contact field
  _ccpuriri_add_contactfield() ;



}

/**
 * Implementation of hook_uninstall().
 */
function ccpuriri_uninstall() {

  _ccpuriri_remove_custom_menu();

  _ccpuriri_remove_addressfield();
   
  _ccpuriri_remove_contactfield();
   

   
}



/**
 * Implementation of hook_enable().
 */
function ccpuriri_enable() {

  _ccpuriri_list_add_main_menu();

}

/**
 * Implementation of hook_disable().
 */
function ccpuriri_disable() {

  _ccpuriri_list_remove_main_menu();

}




/*
 * Module setup functions
* */
/*
 * Add addressfield to user
* */
function  _ccpuriri_add_addressfield()
{
  // create addressfield
  // to clear the cache to include the field type defined in this module

  _field_info_collate_types(true);

  $fieldname = 'field_ccpuriri_addressfield';
  $field = field_read_field($fieldname, array('include_inactive' => TRUE));

  if (empty($field)) {

    $field = array(
        'field_name' => $fieldname,
        'type' => 'ccpuriri_addressfield',
        // 'entity_types' => array('user'), // do not limit entity types using this field

    );

    field_create_field($field);

    // Create the instance if needed.
    // add the field to user, with some widget settings
    if (!field_read_instance('user', $fieldname , 'user', array('include_inactive' => TRUE))) {

      field_attach_create_bundle('user', 'user');

      $settings= array(
          'showname'=> false,
          'showorganization' => false,
      );

      $instance = array(
          'field_name' => $fieldname,
          'label' => 'Address',
          'entity_type' => 'user',
          'widget' => array('settings'=> $settings),
          'bundle' => 'user',
      );
      field_create_instance($instance);
    }

    // add the field to rental
    if (!field_read_instance('node', $fieldname , 'rental', array('include_inactive' => TRUE))) {

      $settings= array(
          'showname'=> false,
          'showorganization' => false,
      );

      $instance = array(
          'field_name' => $fieldname,
          'label' => 'Address',
          'entity_type' => 'node',
          'widget' => array('settings'=> $settings),
          'bundle' => 'ccpuriri_rental',
      );
      field_create_instance($instance);
    }

  }

}

/*
 * Add contact field to user
* */
function  _ccpuriri_add_contactfield()
{
  // create contactfield
  // to clear the cache to include the field type defined in this module

  _field_info_collate_types(true);

  $fieldname = 'field_ccpuriri_contactfield';
  $field = field_read_field($fieldname, array('include_inactive' => TRUE));

  if (empty($field)) {

    $field = array(
        'field_name' => $fieldname,
        'type' => 'ccpuriri_contactfield',
        // 'entity_types' => array('user'), // do not limit entity types using this field

        'cardinality' => FIELD_CARDINALITY_UNLIMITED,
         
    );

    field_create_field($field);

    // Create the instance if needed.
    // add the field to user, with some widget settings
    if (!field_read_instance('user', $fieldname , 'user', array('include_inactive' => TRUE))) {

      field_attach_create_bundle('user', 'user');

      $settings= array();

      $instance = array(
          'field_name' => $fieldname,
          'label' => 'Contacts',
          'entity_type' => 'user',
          'widget' => array('settings'=> $settings),
          'bundle' => 'user',
      );
      field_create_instance($instance);
    }

    // add to rental
    if (!field_read_instance('node', $fieldname , 'rental', array('include_inactive' => TRUE))) {

       
      $settings= array();

      $instance = array(
          'field_name' => $fieldname,
          'label' => 'Contacts',
          'entity_type' => 'node',
          'widget' => array('settings'=> $settings),
          'bundle' => 'ccpuriri_rental',
      );
      field_create_instance($instance);
    }

  }

}


/*
 * Add menu blocks
* */
function _ccpuriri_add_custom_menu(){

  // 1. create a custom menu for header-right, login/register etc
  $secondarymenu = array(
      'menu_name' => 'secondary_top',
      'title' => 'Top Secondary',
      'description' => 'Top level secondary menu',
  );

  menu_save($secondarymenu);

  //2. create ccpuririusernavigation
  //This is group for account related menu items, only displayed when url is user/1
  //It will be switched on by main navigation block CCPuriri Navigation


  $ccpuririusernavigationmenu = array(
      'menu_name' => 'ccpuririusernavigation',
      'title' => 'CCPuriri User Navigation',
      'description' => 'CCPuriri User Navigation menu, do not add this to regions, as it is displayed by CCPuriri Navigation block',
  );

  menu_save($ccpuririusernavigationmenu);


  // Create a menu link for user/% in usernavigation menu.
  /*
  $menu_item = array(
      'menu_name' => 'secondary_top',
      'weight' => 10,
      'link_title' => 'My Account',
      'link_path' => 'user/%',
      'expanded' => true,
  );

  menu_link_save($menu_item);
  */
  // add ccpuriri navigation block to side bar first
  /*
  db_update('block')
  ->fields(array(
      'status' => 1,
      'weight' => -15,
      'region' => 'sidebar_first',
  ))
  ->condition('module', 'ccpuriri')
  ->condition('delta','navigation')
  ->condition('theme', 'bootstrapcc')
  ->execute();
  */


}

/*
 * Module teardown functions
* */

/*
 * Remove the address field
* */
function  _ccpuriri_remove_addressfield(){

  //delete the field
  field_delete_field('field_ccpuriri_addressfield');

  //Purge field data now to allow module to be reinstalled
  //if this is the only field remaining.
  field_purge_batch(10);

}

/*
 * Remove the contact field
* */
function  _ccpuriri_remove_contactfield(){

  //delete the field
  field_delete_field('field_ccpuriri_contactfield');

  //Purge field data now to allow module to be reinstalled
  //if this is the only field remaining.
  field_purge_batch(10);

}
/*
 * Remove the menu blocks
* */
function  _ccpuriri_remove_custom_menu(){

  // 1. delete custom menu
  $secondarymenu = array(
      'menu_name' => 'secondary_top',
  );

  menu_delete($secondarymenu);

  // 2. delete custom menu
  $ccpuririusernavigation = array(
      'menu_name' => 'ccpuririusernavigation',
  );

  menu_delete($ccpuririusernavigation);

}

/*
 * Add list to main menu, this must be in main module as it depends on list module
*
* */
function _ccpuriri_list_add_main_menu(){

  //add the list to main menu

  $list_item = array(
      'menu_name' => 'main-menu',
      'weight' => 100,
      'link_title' => 'My Lists',
      'link_path' => 'list',
      'router_path' => 'list',
      'module' => 'ccpuriri_list',
      'description' => 'My lists menu item on main menu',
      'expanded' => 0,

  );


  menu_link_save($list_item);


  // add the shared list to ccpuririlistnavigation
  $lists = ccpuriri_list_load_shared();

  $menuname = 'ccpuririlistnavigation';

  $i=-100;

  // do not use this item as parent for shared list menus
  // The parent should be the one on same menu which is ccpuririlistnavigation
  $parentmid= ccpuriri_list_root_menu_link_id();

  if (isset($parentmid) && $parentmid>0)
  {

    foreach($lists as $key=>$list)
    {

      $sharedlistitem = array(
          'menu_name' => $menuname,
          'weight' => $i +10,
          'link_title' => $list->title,
          'link_path' => 'list/'.$list->lid,
          'description' => 'Shared list '.$list->title.' menu item on navigation menu',
          'plid' => $parentmid,
          'module' => 'ccpuriri_list',
      );

      menu_link_save($sharedlistitem);
      $i =$i+10;
    }
  }
}

/*
 * remove list from main menu, this must be in main module as it depends on list module
*
*/
function _ccpuriri_list_remove_main_menu(){

  $menuname= "main-menu";

  $module = "ccpuriri_list";

  //delete /list from manin menu
  $delete_query = db_delete('menu_links')
  ->condition('menu_name', $menuname)
  ->condition('module', $module);

  $delete_query->execute();

  // delete top lists from ccpuririlistnavigation
  $menuname= "ccpuririlistnavigation";
  $delete_query = db_delete('menu_links')
  ->condition('menu_name', $menuname)
  ->condition('module', $module);

  $delete_query->execute();

}




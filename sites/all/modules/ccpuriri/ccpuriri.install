<?php 
/**
 * @file
 *  Install, update and uninstall functions for the ccpuriri module.
 */

define ('CCPURIRI_RENTAL_STANDARD_ROLE' , 'CCPuriri rental standard user');

/**
 * Implements hook_schema().
 */
function ccpuriri_schema() {
  // the cache table
  $schema['cache_ccpuriri'] = drupal_get_schema_unprocessed('system', 'cache');
  
  return $schema;
}

/**
 * Implementation of hook_install().
 */
function ccpuriri_install() {

  _ccpuriri_menu_blocks_custom_add();

  // add address field
 _ccpuriri_field_addressfield_add() ;

  // add contact field
  _ccpuriri_field_contactfield_add() ;



}

/**
 * Implementation of hook_uninstall().
 */
function ccpuriri_uninstall() {

  _ccpuriri_menu_blocks_custom_remove();

  _ccpuriri_field_addressfield_remove();
   
  _ccpuriri_field_contactfield_remove();
   

   
}



/**
 * Implementation of hook_enable().
 */
function ccpuriri_enable() {

  // add list menu items to our menu blocks 
  _ccpuriri_menu_system_main_add_list();
  
  // add main menu items
  _ccpuriri_menu_main_add_items();
  
  // setup permissions
  _ccpuriri_rental_permission_setup();
  
}

/**
 * Implementation of hook_disable().
 */
function ccpuriri_disable() {

  _ccpuriri_menu_system_main_remove_list();

  _ccpuriri_menu_main_remove_items();
  
  //remove all rental permission settings
  _ccpuriri_rental_permission_dispose();
}




/*
 * Module setup functions
* */
/*
 * Add addressfield to user
* */
function  _ccpuriri_field_addressfield_add()
{
  $startTime=  microtime(TRUE);
  
  // create addressfield
  // to clear the cache to include the field type defined in this module

  _field_info_collate_types(true);

  $fieldname = 'field_ccpuriri_addressfield';
  $field = field_read_field($fieldname, array('include_inactive' => TRUE));

  if (empty($field)) {

    $field = array(
        'field_name' => $fieldname,
        'type' => 'ccpuriri_addressfield',
        // 'entity_types' => array('user'), // do not limit entity types using this field

    );

    field_create_field($field);

 
    
    
    // Create the instance if needed.
    // add the field to user, with some widget settings
    if (!field_read_instance('user', $fieldname , 'user', array('include_inactive' => TRUE))) {

      field_attach_create_bundle('user', 'user');

      $settings= array(
          'showname'=> false,
          'showorganization' => false,
      );

      $instance = array(
          'field_name' => $fieldname,
          'label' => 'Address',
          'entity_type' => 'user',
          'widget' => array('settings'=> $settings),
          'bundle' => 'user',
      );
      field_create_instance($instance);
    }

    // add the field to rental
    if (!field_read_instance('node', $fieldname , 'rental', array('include_inactive' => TRUE))) {

      $settings= array(
          'showname'=> false,
          'showorganization' => false,
      );

      $instance = array(
          'field_name' => $fieldname,
          'label' => 'Address',
          'entity_type' => 'node',
          'widget' => array('settings'=> $settings),
          'bundle' => 'ccpuriri_rental',
      );
      field_create_instance($instance);
    }

    watchdog('ccpuriri',
        'field_ccpuriri_addressfield is added, time elapsed is %timeElpased ms',
        array('%timeElpased' =>
            round((microtime(TRUE) - $startTime) * 1000,2)
    
        ),
        WATCHDOG_DEBUG);
    
  }

}

/*
 * Add contact field to user
* */
function   _ccpuriri_field_contactfield_add()
{

  $startTime=  microtime(TRUE);
  // create contactfield
  // to clear the cache to include the field type defined in this module

  _field_info_collate_types(true);

  $fieldname = 'field_ccpuriri_contactfield';
  $field = field_read_field($fieldname, array('include_inactive' => TRUE));

  if (empty($field)) {

    $field = array(
        'field_name' => $fieldname,
        'type' => 'ccpuriri_contactfield',
        // 'entity_types' => array('user'), // do not limit entity types using this field

        'cardinality' => FIELD_CARDINALITY_UNLIMITED,
         
    );

    field_create_field($field);

    // Create the instance if needed.
    // add the field to user, with some widget settings
    if (!field_read_instance('user', $fieldname , 'user', array('include_inactive' => TRUE))) {

      field_attach_create_bundle('user', 'user');

      $settings= array();

      $instance = array(
          'field_name' => $fieldname,
          'label' => 'Contacts',
          'entity_type' => 'user',
          'widget' => array('settings'=> $settings),
          'bundle' => 'user',
      );
      field_create_instance($instance);
    }

    // add to rental
    if (!field_read_instance('node', $fieldname , 'rental', array('include_inactive' => TRUE))) {

       
      $settings= array();

      $instance = array(
          'field_name' => $fieldname,
          'label' => 'Contacts',
          'entity_type' => 'node',
          'widget' => array('settings'=> $settings),
          'bundle' => 'ccpuriri_rental',
      );
      field_create_instance($instance);
    }

    watchdog('ccpuriri',
        'field_ccpuriri_contactfield is added, time elapsed is %timeElpased ms',
        array('%timeElpased' =>
            round((microtime(TRUE) - $startTime) * 1000,2)
    
        ),
        WATCHDOG_DEBUG);
    
  }

}


/*
 * Add menu blocks
* */
function _ccpuriri_menu_blocks_custom_add(){

  $startTime=  microtime(TRUE);
  // 1. create a custom menu for header-right, login/register etc
  $secondarymenu = array(
      'menu_name' => 'secondary_top',
      'title' => 'Top Secondary',
      'description' => 'Top level secondary menu',
  );

  menu_save($secondarymenu);

  watchdog('ccpuriri',
      'secondary_top menu block is added, time elapsed is %timeElpased ms',
      array('%timeElpased' =>
          round((microtime(TRUE) - $startTime) * 1000,2)
  
      ),
      WATCHDOG_DEBUG);
  
  
  $startTime=  microtime(TRUE);
  //2. create ccpuririusernavigation
  //This is group for account related menu items, only displayed when url is user/1
  //It will be switched on by main navigation block CCPuriri Navigation


  $ccpuririusernavigationmenu = array(
      'menu_name' => 'ccpuririusernavigation',
      'title' => 'CCPuriri User Navigation',
      'description' => 'CCPuriri User Navigation menu, do not add this to regions, as it is displayed by CCPuriri Navigation block',
  );

  menu_save($ccpuririusernavigationmenu);
  
  
  watchdog('ccpuriri',
      'ccpuririusernavigation menu block is added, time elapsed is %timeElpased ms',
      array('%timeElpased' =>
          round((microtime(TRUE) - $startTime) * 1000,2)
  
      ),
      WATCHDOG_DEBUG);
  
  $startTime=  microtime(TRUE);
  // 3 list navigation is added by list module
  
  //4. create ccpuririmainnavigation
  //This is for working area for logged in user
  //It will be switched on by navigation block CCPuriri Navigation when no specific menu block is required
  
  
  
  $ccpuririmainnavigationmenu = array(
      'menu_name' => 'ccpuririmainnavigation',
      'title' => 'CCPuriri Main Navigation',
      'description' => 'CCPuriri Main Navigation menu, do not add this to regions, as it is displayed by CCPuriri Navigation block',
  );
  
  menu_save($ccpuririmainnavigationmenu);

  watchdog('ccpuriri',
      'ccpuririmainnavigation menu block is added, time elapsed is %timeElpased ms',
      array('%timeElpased' =>
          round((microtime(TRUE) - $startTime) * 1000,2)
  
      ),
      WATCHDOG_DEBUG);

  // Create a menu link for user/% in usernavigation menu.
  /*
  $menu_item = array(
      'menu_name' => 'secondary_top',
      'weight' => 10,
      'link_title' => 'My Account',
      'link_path' => 'user/%',
      'expanded' => true,
  );

  menu_link_save($menu_item);
  */
  // add ccpuriri navigation block to side bar first
  /*
  db_update('block')
  ->fields(array(
      'status' => 1,
      'weight' => -15,
      'region' => 'sidebar_first',
  ))
  ->condition('module', 'ccpuriri')
  ->condition('delta','navigation')
  ->condition('theme', 'bootstrapcc')
  ->execute();
  */


}

/*
 * Module teardown functions
* */

/*
 * Remove the address field
* */
function  _ccpuriri_field_addressfield_remove(){

  $startTime=  microtime(TRUE);
  //delete the field
  field_delete_field('field_ccpuriri_addressfield');

  //Purge field data now to allow module to be reinstalled
  //if this is the only field remaining.
  field_purge_batch(10);

  watchdog('ccpuriri',
      'field_ccpuriri_addressfield is deleted, time elapsed is %timeElpased ms',
      array('%timeElpased' =>
          round((microtime(TRUE) - $startTime) * 1000,2)
  
      ),
      WATCHDOG_DEBUG);
  
  
}

/*
 * Remove the contact field
* */
function  _ccpuriri_field_contactfield_remove(){

  $startTime=  microtime(TRUE);
  
  //delete the field
  field_delete_field('field_ccpuriri_contactfield');

  //Purge field data now to allow module to be reinstalled
  //if this is the only field remaining.
  field_purge_batch(10);

  watchdog('ccpuriri',
      'field_ccpuriri_contactfield is deleted, time elapsed is %timeElpased ms',
      array('%timeElpased' =>
          round((microtime(TRUE) - $startTime) * 1000,2)
  
      ),
      WATCHDOG_DEBUG);
  
}
/*
 * Remove the menu blocks
* */
function  _ccpuriri_menu_blocks_custom_remove(){

  $startTime=  microtime(TRUE);
  // 1. delete custom menu
  $secondarymenu = array(
      'menu_name' => 'secondary_top',
  );

  menu_delete($secondarymenu);

  // 2. delete custom menu
  $ccpuririusernavigation = array(
      'menu_name' => 'ccpuririusernavigation',
  );

  menu_delete($ccpuririusernavigation);
  //3 list menu will be deleted by list module
  
  // 4 delete ccpuriri main menu
  $ccpuririmainrnavigation = array(
      'menu_name' => 'ccpuririmainnavigation',
  );
  
  menu_delete($ccpuririmainnavigation);

  watchdog('ccpuriri',
      'Menu blocks are deleted, time elapsed is %timeElpased ms',
      array('%timeElpased' =>
          round((microtime(TRUE) - $startTime) * 1000,2)
  
      ),
      WATCHDOG_DEBUG);
  
  
}

/*
 * Add list to main menu, this must be in main module as it depends on list module
*
* */
function _ccpuriri_menu_system_main_add_list(){

  $startTime=  microtime(TRUE);
  
  //add the list to main menu

  $list_item = array(
      'menu_name' => 'main-menu',
      'weight' => 100,
      'link_title' => t('My Lists'), //use the router one, to activate callback
      'link_path' => 'list',
      'router_path' => 'list',
      'module' => 'ccpuriri_list',
      'description' => 'My lists menu item on system main menu',
      'options'=>array(
          'icon'=>'icon-folder-open',
          'html'=>true,
      ),
      'expanded' => 0,

  );


  menu_link_save($list_item);


  // add the shared list to ccpuririlistnavigation
  $lists = ccpuriri_list_load_shared();

  $menuname = 'ccpuririlistnavigation';

  $i=-100;

  // do not use this item as parent for shared list menus
  // The parent should be the one on same menu which is ccpuririlistnavigation
  $parentmid= ccpuriri_list_root_menu_link_id();

  if (isset($parentmid) && $parentmid>0)
  {

    foreach($lists as $key=>$list)
    {

      $sharedlistitem = array(
          'menu_name' => $menuname,
          'weight' => $i +10,
          'link_title' => 'My listsss', // use router title to activate call back 
          'link_path' => 'list/'.$list->lid,
          'description' => 'Shared list '.$list->title.' menu item on navigation menu',
          'options'=>array(
             'icon'=>'icon-reorder',
              'html'=>true,
          ),
          'plid' => $parentmid,
          'module' => 'ccpuriri_list',
      );

      menu_link_save($sharedlistitem);
      $i =$i+10;
    }
  }
  
  watchdog('ccpuriri',
      'List menu items are added, time elapsed is %timeElpased ms',
      array('%timeElpased' =>
          round((microtime(TRUE) - $startTime) * 1000,2)
  
      ),
      WATCHDOG_DEBUG);
}

/*
 * remove list from main menu, this must be in main module as it depends on list module
*
*/
function _ccpuriri_menu_system_main_remove_list(){

  $startTime=  microtime(TRUE);
  
  $menuname= "main-menu";

  $module = "ccpuriri_list";

  //delete /list from manin menu
  $delete_query = db_delete('menu_links')
  ->condition('menu_name', $menuname)
  ->condition('module', $module);

  $delete_query->execute();

  // delete top lists from ccpuririlistnavigation
  $menuname= "ccpuririlistnavigation";
  $delete_query = db_delete('menu_links')
  ->condition('menu_name', $menuname)
  ->condition('module', $module);

  $delete_query->execute();
  
  watchdog('ccpuriri',
      'List menu links are removed, time elapsed is %timeElpased ms',
      array('%timeElpased' =>
          round((microtime(TRUE) - $startTime) * 1000,2)
  
      ),
      WATCHDOG_DEBUG);
  

}


/*
 * Add item to ccpuriri main menu
 * it is visible only when user is logged in
*
* */
function _ccpuriri_menu_main_add_items(){

  $startTime=  microtime(TRUE);
  
  // first add home to it
  $home_item = array(
      'menu_name' => 'ccpuririmainnavigation',
      'weight' => -100,
      'link_title' => t('Home'), 
      'link_path' => '<front>',
      'router_path' => '',
      'module' => 'ccpuriri',
      'description' => 'Home on main menu',
      'options'=>array(
          'icon'=>'icon-home',
          'html'=>true,
      ),
      'external' => 1,
      'expanded' => 0,
  
  );
  
  menu_link_save($home_item);
  
  //second add my lists to it
  
  
  $list_item = array(
      'menu_name' => 'ccpuririmainnavigation',
      'weight' => -90,
      'link_title' => t('My Lists'), 
      'link_path' => 'list',
      'router_path' => 'list',
      'module' => 'ccpuriri',
      'description' => 'My lists menu item on main menu',
      'options'=>array(
          'icon'=>'icon-folder-open',
          'html'=>true,
      ),
      'expanded' => 0,
  
  );
    
  menu_link_save($list_item);
  
  // 3 add my account to it
  
  $account_item = array(
      'menu_name' => 'ccpuririmainnavigation',
      'weight' => -80,
      'link_title' => t('My account'),
      'link_path' => 'user',
      'router_path' => 'user',
      'module' => 'ccpuriri',
      'description' => 'My account menu item on main menu',
      'options'=>array(
          'icon'=>'icon-user',
          'html'=>true,
      ),
      'expanded' => 0,
  
  );
    
  menu_link_save($account_item);
  
  
  //add rental to main menu
  
  $rental_item = array(
      'menu_name' => 'main-menu',
      'weight' => 120,
      'link_title' => t('Rental'), //use the router one, to activate callback
      'link_path' => 'rental',
      'router_path' => 'rental',
      'module' => 'ccpuriri_rental',
      'description' => 'Rental menu item on system main menu',
      'options'=>array(
          'icon'=>'icon-gift',
          'html'=>true,
      ),
      'expanded' => 0,
  );
  
  
  menu_link_save($rental_item);
  
  
  watchdog('ccpuriri',
      'Menu links home, list my account etc are added, time elapsed is %timeElpased ms',
      array('%timeElpased' =>
          round((microtime(TRUE) - $startTime) * 1000,2)
  
      ),
      WATCHDOG_DEBUG);
}

/*
 * Add item to ccpuriri main menu
* it is visible only when user is logged in
*
* */
function _ccpuriri_menu_main_remove_items(){
  
  $startTime=  microtime(TRUE);
  
  $menuname= "ccpuririmainnavigation";
  
  $module = "ccpuriri";
  
  //delete * from ccpuririmainnavigation
  $delete_query = db_delete('menu_links')
  ->condition('menu_name', $menuname)
  ->condition('module', $module);
  
  $delete_query->execute();
  
  // delete the ccpuriri-rental item on main-menu
  $menuname= "main-menu";
  
  $module = "ccpuriri_rental";
  
  $delete_query = db_delete('menu_links')
  ->condition('menu_name', $menuname)
  ->condition('module', $module);
  
  $delete_query->execute();
  
  
  
  watchdog('ccpuriri',
      'ccpuririmainnavigation Menu links are removed, time elapsed is %timeElpased ms',
      array('%timeElpased' =>
          round((microtime(TRUE) - $startTime) * 1000,2)
  
      ),
      WATCHDOG_DEBUG);
  
}


/*
 * it has to be in main module, compared in rental module 
 * where the node type has not be created in module enable or disable
 *set up a particular role ccpuriri_rental_standard_role for rental type
* set up permissions for ccpuriri_rental_standard_role
* assign this role to all existing users exectept admin
* 
*
* */
function _ccpuriri_rental_permission_setup()
{
  // create CCPURIRI_RENTAL_STANDARD_ROLE

  // role id keyed key value array, value is role name
  $roles = user_roles();

  $key = array_search(CCPURIRI_RENTAL_STANDARD_ROLE,$roles);


  if(!$key)
  {
    // add the standard role
    $standardRole= new stdClass();
    $standardRole->name = CCPURIRI_RENTAL_STANDARD_ROLE;

    user_role_save($standardRole);

  }

  
  //refresh

  $roles = user_roles();

  $key = array_search(CCPURIRI_RENTAL_STANDARD_ROLE,$roles);

  if($key)
  {
    // set up the permissions for CCPURIRI_RENTAL_STANDARD_ROLE
    // do not call module_invoke_all('permission') as current content type has not been added yet

    $type = 'ccpuriri_rental';

    $permissionsToAdd =array();

    // add create $type content, ccpuriri_rental
    $permissionsToAdd[] = "create $type content";


    // add edit own $type content,  ccpuriri_rental
    $permissionsToAdd[] = "edit own $type content";

    // add delete own $type content, ccpuriri_rental
    $permissionsToAdd[] = "delete own $type content";


    user_role_grant_permissions($key, $permissionsToAdd);

    // add all existing users except admin to this role,
    $result = db_select('users')
    ->fields('users', array('uid'))
    ->condition('uid', 1,'>') // only all users except admin
    ->execute();

    $query = db_insert('users_roles')->fields(array('uid', 'rid'));

    foreach ($result as $item) {

      $query->values(array(
          'uid' => $item->uid,
          'rid' => $key,
      ));

    }

    $query->execute();

  }

}

/**
 * remove users for role  ccpuriri_rental_standard_role
 * remove permissions for role ccpuriri_rental_standard_role
 * remove role itself
 *
 * */
function _ccpuriri_rental_permission_dispose()
{

  //delete the role
  // role id keyed key value array, value is role name
  $roles = user_roles();
  // if not found it returns false, otherwise the key
  $key = array_search(CCPURIRI_RENTAL_STANDARD_ROLE,$roles);

  if($key)
  {
    //delete role
    user_role_delete($key);

  }
}



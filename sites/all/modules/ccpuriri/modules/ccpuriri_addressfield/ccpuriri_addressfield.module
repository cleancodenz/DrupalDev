<?php 


require_once (dirname(__FILE__) . '/ccpuriri_addressfield.widget.inc');

/**
 * Implements hook_field_info()
 */
function ccpuriri_addressfield_field_info() {
  $fields = array();

  $fields['ccpuriri_addressfield'] = array(
      'label' => t('Postal address'),
      'description' => t('A field type used for storing postal addresses according the xNAL standard.'),
      'settings' => array(),
      'instance_settings' => array(),
      'default_widget' => 'ccpuriri_addressfield_standard',
      'default_formatter' => 'ccpuriri_addressfield_default',
  );

  return $fields;
}

/**
 * Implements hook_field_is_empty()
 */
function ccpuriri_addressfield_field_is_empty($item, $field) {
  return empty($item['thoroughfare']) ||empty($item['locality']);
}


/**
 * Implements hook_field_widget_info()
 */
function ccpuriri_addressfield_field_widget_info() {
  $widgets = array();

  $widgets['ccpuriri_addressfield_standard'] = array(
      'label' => t('CCPuriri address form'),
      'field types' => array('ccpuriri_addressfield'),
      'settings' => array(
          'showname' => false,
          'showorganization'=> false,
      ),
      'behaviors' => array(
          'default value' => FIELD_BEHAVIOR_NONE,
      ),
  );

  return $widgets;

}




/**
 * Implements hook_field_widget_form()
 */
function ccpuriri_addressfield_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {

 
  // if it is wrapped in fieldset, it will have a legend
  //$element['#type'] = 'fieldset';
  
  
  $element += ccpuriri_addressfield_generate($form, $form_state, $field, $instance, $langcode,
    $items, $delta, $element);
     
  

  return $element;
}

/**
 * Implements  hook_field_widget_settings_form
 */
function ccpuriri_addressfield_field_widget_settings_form($field, $instance)
{
  $widget = $instance['widget'];
  $settings = $widget['settings'];

  $form['showname'] = array(
      '#type' => 'checkbox',
      '#title' => t('Show name fields for address'),
      '#default_value' => $settings['showname'],

  );

  $form['showorganization'] = array(
      '#type' => 'checkbox',
      '#title' => t('Show company field for address'),
      '#default_value' => $settings['showorganization'],

  );


  return $form;

}



/**
 * Implements hook_field_formatter_info().
 */
function ccpuriri_addressfield_field_formatter_info() {
  return array(
      'ccpuriri_addressfield_default' => array(
          'label' => t('Default'),
          'field types' => array('ccpuriri_addressfield'),
          'settings' => array(),
      ),
      'ccpuriri_addressfield_subandstreet' => array(
          'label' => t('Suburb and Street'),
          'field types' => array('ccpuriri_addressfield'),
          'settings' => array(),
      ),
  );
}


/**
 * Implements hook_field_formatter_view().
 */
function ccpuriri_addressfield_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $settings = $display['settings'];
  $element = array();

  switch ($display['type']) {
    case 'ccpuriri_addressfield_default':

      foreach ($items as $delta => $address) {

        //$element[$delta] = addressfield_generate($address, $handlers, $context);
      }
      break;
    
    case 'ccpuriri_addressfield_subandstreet':
        // this is used by list view, just displaying suburb and street number and street
      
        foreach ($items as $delta => $address) {
          // this only has one value
          $format['city_block'] = array(
              '#type' => 'ccpuriri_container',
              '#tag' => 'span',
              '#attributes' => array('class' => array('city-block')),
          );
          $format['city_block']['city'] =
          array('#markup' => strip_tags($address['locality']));
          
          $format['suburb_block'] = array(
              '#type' => 'ccpuriri_container',
              '#tag' => 'span',
              '#attributes' => array('class' => array('suburb-block')),
          );
          $format['suburb_block']['suburb'] =
            array('#markup' => strip_tags($address['dependent_locality']));
          
          $format['street_block'] = array(
              '#type' => 'ccpuriri_container',
              '#tag' => 'span',
              '#attributes' => array('class' => array('street-block')),
          );
          $format['street_block']['street'] =
          array('#markup' => strip_tags($address['thoroughfare']));
          
          
          $element[$delta] =$format ;
          
          
        }
        break;
    
    default:
      ;
    
      
  }

  return $element;
}





/**
 * Only set the country column of a field.
 */
function _ccpuriri_addressfield_default_value()
{
  $country = variable_get('ccpuriri_country', "NZ");

  $default = array(
      'country' => $country,
      'name_line' => '',
      'first_name' => '',
      'last_name' => '',
      'organisation_name' => '',
      'administrative_area' => '',
      'sub_administrative_area' => '',
      'locality' => '',
      'dependent_locality' => '',
      'postal_code' => '',
      'thoroughfare' => '',
      'premise' => '',
      'sub_premise' => '',
      'data' => '',
      'lat' => 0,
      'lon' => 0,
      
  );

  return $default;

}

/**
 * Implements hook_menu().
 *
 */

function ccpuriri_addressfield_menu() {

  // google search
  $items['ccpuriri_addressfield/autocomplete'] = array(
      'title' => 'Geocoder autocomplete',
      'page callback' => 'ccpuriri_addressfield_external_autocomplete',
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
      'file' => 'ccpuriri_addressfield.widget.inc',
  );


  return $items;
}

/*
 * Implements hook_cron_queue_info().
* Save external searches to internal.
* */
function ccpuriri_addressfield_cron_queue_info() {
  $queues['ccpuriri_addressfield_update'] = array(
      'worker callback' => 'ccpuriri_addressfield_search_update',
      'time' => 60,
  );
  return $queues;
}

/**
 * worker callback of queue: ccpuriri_addressfield_update
 * */
function ccpuriri_addressfield_search_update($searchResult)
{

  global $language;
  
  $skey = $searchResult['key'];

  // The transaction opens here.
  $transaction = db_transaction();

  try {

    $startTime=  microtime(TRUE);
     
    // to delete old records
    db_delete('ccpuriri_addressfield_search')
    ->condition('skey', $skey)
    ->execute();

    // add records back

    $query = db_insert('ccpuriri_addressfield_search')
    ->fields(array(
        'skey', 'formatted_address', 'country',
        'administrative_area','sub_administrative_area','locality',
        'dependent_locality','postal_code','thoroughfare',
        'premise','sub_premise','lat',
        'lon','created'));


    foreach ($searchResult['matches'] as $key=> $macth) {

      $record = $macth+
          array(
              'skey' => $skey,
              'formatted_address' => $key,
              'country'=>'',
              'administrative_area'=>'',
              'sub_administrative_area'=>'',
              'locality'=>'',
              'dependent_locality'=>'',
              'postal_code'=>'',
              'thoroughfare'=>'',
              'premise'=>'',
              'sub_premise'=>'',
              'lat'=>0,
              'lon'=>0,
              'created'=> REQUEST_TIME,
          ) ;

      $query->values($record);
    }
    
    $query->execute();
    
    watchdog('ccpuriri_addressfield',
        'Search results saved to db, time elapsed is %timeElpased ms', 
        array('%timeElpased' =>  
            round((microtime(TRUE) - $startTime) * 1000,2)
             
        ),
    WATCHDOG_DEBUG);
  }
  catch (Exception $e) {
    $transaction->rollback();
    watchdog_exception('ccpuriri_addressfield', $e);
  }

}

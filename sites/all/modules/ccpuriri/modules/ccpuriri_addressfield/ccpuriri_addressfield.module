<?php 

/**
 * Implements hook_field_info()
 */
function ccpuriri_addressfield_field_info() {
  $fields = array();

  $fields['ccpuriri_addressfield'] = array(
    'label' => t('Postal address'),
    'description' => t('A field type used for storing postal addresses according the xNAL standard.'),
    'settings' => array(),
    'instance_settings' => array(),
    'default_widget' => 'ccpuriri_addressfield_standard',
    'default_formatter' => 'ccpuriri_addressfield_default',
  );

  return $fields;
}


/**
 * Implements hook_field_widget_info()
 */
function ccpuriri_addressfield_field_widget_info() {
  $widgets = array();

  $widgets['ccpuriri_addressfield_standard'] = array(
      'label' => t('CCPuriri address form'),
      'field types' => array('ccpuriri_addressfield'),
      'settings' => array(),
  );

  return $widgets;
  
}


/**
 * Implements hook_field_widget_form()
 */
function ccpuriri_addressfield_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $settings = $instance['widget']['settings'];

  // Generate a specific key used to identify this element to restore a default
  // value upon AJAX submission regardless of where this element is in the
  // $form array.
  $element_key = implode('|', array($element['#entity_type'], $element['#bundle'], $element['#field_name'], $element['#language'], $element['#delta']));

  // Store the key in the element array as a value so it can be easily retrieved
  // in context in the $form_state['values'] array in the element validator.
  $element['element_key'] = array(
      '#type' => 'value',
      '#value' => $element_key,
  );

  // Get the default address used to build the widget form elements, looking
  // first in the form state, then in the stored value for the field, and then
  // in the default values of the instance.
  $address = array();

  if (!empty($form_state['addressfield'][$element_key])) {
    // Use the value from the form_state if available.
    $address = $form_state['addressfield'][$element_key];
  }  
  elseif (!empty($items[$delta]['country'])) {
    // Else use the saved value for the field.
    $address = $items[$delta];
  }
  else {
    // Otherwise use the instance default.
    $address = (array) $instance['default_value'][0];
  }

  // Merge in default values to provide a value for every expected array key.
 // $countries = _addressfield_country_options_list($field, $instance);
 // $address += addressfield_default_values($countries);

  // Add the form elements for the standard widget, which includes a country
  // select list at the top that reloads the available address elements when the
  // country is changed.
  if ($instance['widget']['type'] == 'ccpuriri_addressfield_standard') {
    // Wrap everything in a fieldset. This is not the best looking element,
    // but it's the only wrapper available in Drupal we can properly use
    // in that context, and it is overridable if necessary.
    $element['#type'] = 'fieldset';

    // Generate the address form.
    $context = array(
    'mode' => 'form',
    'field' => $field,
    'instance' => $instance,
    'langcode' => $langcode,
    'delta' => $delta,
    );
  //  $element += addressfield_generate($address, $settings['format_handlers'], $context);

    // Mark the form element as required if necessary.
    $element['#required'] = $delta == 0 && $instance['required'];
}

return $element;
}



/**
 * Implements hook_field_formatter_info().
 */
function ccpuriri_addressfield_field_formatter_info() {
  return array(
      'ccpuriri_addressfield_default' => array(
          'label' => t('Default'),
          'field types' => array('ccpuriri_addressfield'),
          'settings' => array(),
      ),
  );
}


/**
 * Implements hook_field_formatter_view().
 */
function ccpuriri_addressfield_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $settings = $display['settings'];
  $element = array();

  switch ($display['type']) {
    case 'ccpuriri_addressfield_default':
    
      foreach ($items as $delta => $address) {
      
        //$element[$delta] = addressfield_generate($address, $handlers, $context);
      }
      break;
  }

  return $element;
}
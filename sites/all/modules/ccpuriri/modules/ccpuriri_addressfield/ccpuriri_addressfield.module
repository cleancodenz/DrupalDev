<?php 

/**
 * Implements hook_field_info()
 */
function ccpuriri_addressfield_field_info() {
  $fields = array();

  $fields['ccpuriri_addressfield'] = array(
      'label' => t('Postal address'),
      'description' => t('A field type used for storing postal addresses according the xNAL standard.'),
      'settings' => array(),
      'instance_settings' => array(),
      'default_widget' => 'ccpuriri_addressfield_standard',
      'default_formatter' => 'ccpuriri_addressfield_default',
  );

  return $fields;
}

/**
 * Implements hook_field_is_empty()
 */
function ccpuriri_addressfield_field_is_empty($item, $field) {
  return empty($item['thoroughfare']) ||empty($item['locality']);
}


/**
 * Implements hook_field_widget_info()
 */
function ccpuriri_addressfield_field_widget_info() {
  $widgets = array();

  $widgets['ccpuriri_addressfield_standard'] = array(
      'label' => t('CCPuriri address form'),
      'field types' => array('ccpuriri_addressfield'),
      'settings' => array(
          'showname' => false,
          'showorganization'=> false,
      ),
      'behaviors' => array(
          'default value' => FIELD_BEHAVIOR_NONE,
      ),
  );

  return $widgets;

}


/**
 * Implementation of hook_element_info(). this is for widget form block element
 */
function ccpuriri_addressfield_element_info() {
  $types['ccpuriri_addressfield_container'] = array(
      '#theme_wrappers' => array('ccpuriri_addressfield_container'),
      '#process' => array('ccpuriri_addressfield_widget_process'),
      '#attributes' => array(),
      '#tag' => 'div',
  );
  return $types;
}

/**
 * Implementation of hook_theme().
 */
function ccpuriri_addressfield_theme() {
  $hooks['ccpuriri_addressfield_container'] = array(
      'render element' => 'element',
  );
  return $hooks;
}


/**
 * Implements hook_field_widget_form()
 */
function ccpuriri_addressfield_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {

  // Generate a specific key used to identify this element to restore a default
  // value upon AJAX submission regardless of where this element is in the
  // $form array.
  $element_key = implode('|', array($element['#entity_type'], $element['#bundle'], $element['#field_name'], $element['#language'], $element['#delta']));

  // Store the key in the element array as a value so it can be easily retrieved
  // in context in the $form_state['values'] array in the element validator.
  $element['element_key'] = array(
      '#type' => 'value',
      '#value' => $element_key,
  );

  // Get the default address used to build the widget form elements, looking
  // first in the form state, then in the stored value for the field, and then
  // in the default values of the instance.
  $address = array();

  if (!empty($form_state['addressfield'][$element_key])) {
    // Use the value from the form_state if available.
    $address = $form_state['addressfield'][$element_key];
  }
  elseif (!empty($items[$delta]['country'])) {
    // Else use the saved value for the field.
    $address = $items[$delta];
  }
  else {
    // Otherwise use the instance default.
    $address = (array) $instance['default_value'][0];
  }

  // Merge in default values to provide a value for every expected array key.
  // address does not include delta
  $address += ccpuriri_addressfield_default_value();

  // Add the form elements for the standard widget, which includes a country
  // select list at the top that reloads the available address elements when the
  // country is changed.
  if ($instance['widget']['type'] == 'ccpuriri_addressfield_standard') {
    // Wrap everything in a fieldset. This is not the best looking element,
    // but it's the only wrapper available in Drupal we can properly use
    // in that context, and it is overridable if necessary.
    $element['#type'] = 'fieldset';

    // Generate the address form.
    $context = array(
        'field' => $field,
        'instance' => $instance,
        'langcode' => $langcode,
        'delta' => $delta,
    );

    module_load_include('inc', 'ccpuriri_addressfield', 'ccpuriri_addressfield.widget');

    $element += ccpuriri_addressfield_generate($address, $context);

    // Mark the form element as required if necessary.
    $element['#required'] = $delta == 0 && $instance['required'];
  }

  return $element;
}

/**
 * Implements  hook_field_widget_settings_form
 */
function ccpuriri_addressfield_field_widget_settings_form($field, $instance)
{
  $widget = $instance['widget'];
  $settings = $widget['settings'];

  $form['showname'] = array(
      '#type' => 'checkbox',
      '#title' => t('Show name fields for address'),
      '#default_value' => $settings['showname'],

  );

  $form['showorganization'] = array(
      '#type' => 'checkbox',
      '#title' => t('Show company field for address'),
      '#default_value' => $settings['showorganization'],

  );


  return $form;

}



/**
 * Implements hook_field_formatter_info().
 */
function ccpuriri_addressfield_field_formatter_info() {
  return array(
      'ccpuriri_addressfield_default' => array(
          'label' => t('Default'),
          'field types' => array('ccpuriri_addressfield'),
          'settings' => array(),
      ),
  );
}


/**
 * Implements hook_field_formatter_view().
 */
function ccpuriri_addressfield_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $settings = $display['settings'];
  $element = array();

  switch ($display['type']) {
    case 'ccpuriri_addressfield_default':

      foreach ($items as $delta => $address) {

        //$element[$delta] = addressfield_generate($address, $handlers, $context);
      }
      break;
  }

  return $element;
}

/**
 * Form API process function: set the #parents of the children of this element so they appear at the same level as the parent.
 * coluns are grouped under block, this will allow columns to bypass block wrapper to satisfy Feild API
 */
function ccpuriri_addressfield_widget_process($element) {

  foreach (element_children($element) as $key) {
    $element[$key]['#parents'] = $element['#parents'];
    $element[$key]['#parents'][count($element[$key]['#parents']) - 1] = $key;
  }

  return $element;
}

/**
 * Render a container for a set of address fields.
 * theme wrapper for block container
 */
function theme_ccpuriri_addressfield_container($variables) {
  $element = $variables['element'];

  $element['#children'] = trim($element['#children']);
  if (strlen($element['#children']) > 0) {
    $output = '<' . $element['#tag'] . drupal_attributes($element['#attributes']) . '>';
    $output .= $element['#children'];
    $output .= '</' . $element['#tag'] . ">";
    return $output;
  }
  else {
    return '';
  }
}

/**
 * Only set the country column of a field.
 */
function ccpuriri_addressfield_default_value()
{
  $country = variable_get('ccpuriri_country', "NZ");

  $default = array(
      'country' => $country,
      'name_line' => '',
      'first_name' => '',
      'last_name' => '',
      'organisation_name' => '',
      'administrative_area' => '',
      'sub_administrative_area' => '',
      'locality' => '',
      'dependent_locality' => '',
      'postal_code' => '',
      'thoroughfare' => '',
      'premise' => '',
      'sub_premise' => '',
      'data' => '',
  );

  return $default;

}

/**
 * Implements hook_menu().
 * 
 */

function ccpuriri_addressfield_menu() {

  // google search 
  $items['ccpuriri_addressfield/autocomplete/%menu_tail'] = array(
    'title' => 'Geocoder autocomplete',
    'page callback' => 'ccpuriri_addressfield_external_autocomplete',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'ccpuriri_addressfield.widget.inc',
  );

  
  return $items;
}

<?php 

/**
 * Implementation of hook_element_info(). this is for widget form block element
 */
function ccpuriri_common_element_info() {
  $types['ccpuriri_container'] = array(
      '#theme_wrappers' => array('ccpuriri_container'),
      '#process' => array('ccpuriri_container_process'),
      '#attributes' => array(),
      '#tag' => 'div', // custom tag
      '#id' => '',// set a id for this wrapper
  );

  //button with dropdown menu, it is not submit button, only way it works is ajax
  $types['ccpuriri_dropdownbutton'] = array(
      '#input'=>true, // to make it trigger element
      '#process' => array('ccpuriri_dropdownbutton_process','ajax_process_form'),
      '#theme_wrappers' => array('ccpuriri_dropdownbutton'),
      '#attributes' => array(),

      /*
       * other possible attributes
  *
  * '#ajax' - normal ajax setting will be used by underneath hidden input
  * '#colorcode'=>'primary','success','info','warning','danger', no value means 'default'
  * '#items' =>array() of dropdown items with structure of
  *             array('id'=> $list->lid,'description' => $list->title, when 'id' is zero, then it is a devider
  );
  *
  * */
  );

  return $types;
}

/**
 * Implementation of hook_theme().
 */
function ccpuriri_common_theme() {
  $hooks['ccpuriri_container'] = array(
      'render element' => 'element',
  );
  $hooks['ccpuriri_dropdownbutton'] = array(
      'render element' => 'element',
  );
  return $hooks;
}



/**
 * Render a container for a set of address fields.
 * theme wrapper for block container
 */
function theme_ccpuriri_container($variables) {
  $element = $variables['element'];

  $element['#children'] = trim($element['#children']);
  if (strlen($element['#children']) > 0) {
    $output = '<' . $element['#tag'] .
    (empty($element['#id'])? '': ' id='.$element['#id'])
    . drupal_attributes($element['#attributes']) . '>';
    $output .= $element['#children'];
    $output .= '</' . $element['#tag'] . ">";
    return $output;
  }
  else {
    return '';
  }
}

/**
 * Form API process function: set the #parents of the children of this element so they appear at the same level as the parent.
 * coluns are grouped under block, this will allow columns to bypass block wrapper to satisfy Feild API
 */
function ccpuriri_container_process($element, &$form_state, $form) {

  foreach (element_children($element) as $key) {
    $element[$key]['#parents'] = $element['#parents'];
    $element[$key]['#parents'][count($element[$key]['#parents']) - 1] = $key;
  }

  return $element;
}


/**
 * Form API process function: 
 * add a hidden input which will trigger ajax
 *  
 */
function ccpuriri_dropdownbutton_process($element, &$form_state, $form) {
   
  // always having a tree structure for UI
  $element['#tree'] = true;
  
  $element['selecteditem'] = array(
      '#type'=>'hidden',
      '#default_value' =>'0',
      '#attached'=>array(
          'js' => array(drupal_get_path('module', 'ccpuriri_common') . '/ccpuriri_common_dropdownbutton.js'=>
              array('group' => JS_DEFAULT, 'weight'=>500),
              array('type' => 'setting',
                  'data' => array('dropdownbuttonids'=>array($element['#id'])),
                  ), // telling the client javascript the id of this element
              ),
         
        ),
      
      );
  
  if(!empty($element['#ajax']))
  {
    //customize this triggering event 
    unset($element['#ajax']['event']);
    $element['#ajax']['event']='itemselected';
    
  }   
  return $element;
}


/**
 * Render a button which has a title
 * theme wrapper for ccpuriri_titlebutton
 */
function theme_ccpuriri_dropdownbutton($variables) {
  $element = $variables['element'];
  
  element_set_attributes($element, array('id', 'name', 'value'));
  
  
  // create attributes array for dropdown button
  $dropdownattributes = array(); 

  $element['#attributes']['type'] = 'button';
  
  $dropdownattributes['type'] ='button';
   
  
  if (!empty($element['#attributes']['disabled'])) {
    $element['#attributes']['class'][] = 'form-button-disabled';
    $dropdownattributes['class'][] = 'form-button-disabled';
    
  }

  $element['#attributes']['class'][] = 'btn';
  $dropdownattributes['class'][] ='btn';
  
  // button color
  if (!empty($element['#colorcode']))
  {
    $element['#attributes']['class'][] = 'btn-'.$element['#colorcode'];
    
    $dropdownattributes['class'][] ='btn-'.$element['#colorcode'];
  }
  else
  {
    $element['#attributes']['class'][] = 'btn-default';
    $dropdownattributes['class'][] ='btn-default';
  }

  // these two only for dropdown
  
  $dropdownattributes['class'][] = 'dropdown-toggle';
  
  $dropdownattributes['data-toggle'] = 'dropdown';

  //move value to text
  $val = '';

  if (!empty($element['#attributes']['value']))
  {
    $val = $element['#attributes']['value'];
    unset($element['#attributes']['value']);
  }

  $buttonOutput ='<button '.drupal_attributes($element['#attributes']).
  '>'.$val.'</button>';
  
  $dropdownmenuOutput = '<button '.drupal_attributes($dropdownattributes).
  '><span class="caret"></span></button>';

  $dropdownmenuOutput .='<ul class="dropdown-menu" role="menu">';

  foreach($element['#items'] as $item)
  {
    if ($item['id']==0)
    {
      $dropdownmenuOutput.='<li class="divider" value="'.$item['id'].'"></li>';
    }
    else
    {
      $dropdownmenuOutput.='<li value="'.$item['id'].'"><a href="#">'.$item['description'].'</a></li>';
    }
  }

  $dropdownmenuOutput.='</ul>';
  
  //wrap them under a div with a id as elementid-div, this will be used by clientside javascript
  
  return '<div class="btn-group" id="'.$element['#id'].'-div'. '">' .
     $buttonOutput.$element['#children'].$dropdownmenuOutput.
     ' </div>';

}

<?php 

/**
 * Implementation of hook_element_info(). this is for widget form block element
 */
function ccpuriri_common_element_info() {
  // this can be used on a form and a view to add div arround child elements
  $types['ccpuriri_container'] = array(
      '#theme_wrappers' => array('ccpuriri_container'),
      '#process' => array('ccpuriri_container_process'),
      '#attributes' => array(),
      '#tag' => 'div', // custom tag
      '#id' => '',// set a id for this wrapper
  );

  //button with dropdown menu, it is not submit button, only way it works is ajax
  $types['ccpuriri_dropdownbutton'] = array(
      '#input'=>true, // to make it trigger element
      '#process' => array('ccpuriri_dropdownbutton_process','ajax_process_form'),
      '#theme_wrappers' => array('ccpuriri_dropdownbutton'),
      '#attributes' => array(),

      /*
       * other possible attributes
  *
  * '#ajax' - normal ajax setting will be used by underneath hidden input
  * '#colorcode'=>'primary','success','info','warning','danger', no value means 'default'
  * '#items' =>array() of dropdown items with structure of
  *             array('id'=> $list->lid,'description' => $list->title, when 'id' is zero, then it is a devider
  );
  * '#icon'=>' icon-remove'
  * */
  );

  //button with icon it is not submit button, only way it works is ajax

  $types['ccpuriri_imagebutton'] = array(
      '#input'=>true, // to make it trigger element
      '#process' => array('ajax_process_form'),
      '#button_type'=> 'submit',
      '#type' => 'button',
      '#theme_wrappers' => array('ccpuriri_imagebutton'),
       
      /*
       * other possible attributes
  * '#value' will be value of button, not the text, but in old ie, prior 8, the text is submitted
  * '#title' will be text of button
  * '#icon'=>' icon-remove'
  * '#ajax' - normal ajax setting will be used by underneath hidden input
  * '#colorcode'=>'primary','success','info','warning','danger', no value means 'default'
  * */
  );

  return $types;
}

/**
 * Implementation of hook_theme().
 */
function ccpuriri_common_theme() {
  $hooks['ccpuriri_container'] = array(
      'render element' => 'element',
  );
  $hooks['ccpuriri_dropdownbutton'] = array(
      'render element' => 'element',
  );
  $hooks['ccpuriri_imagebutton'] = array(
      'render element' => 'element',
  );
  return $hooks;
}



/**
 * Render a container for a set of address fields.
 * theme wrapper for block container
 */
function theme_ccpuriri_container($variables) {
  $element = $variables['element'];

  $element['#children'] = trim($element['#children']);
  if (strlen($element['#children']) > 0) {
    $output = '<' . $element['#tag'] .
    (empty($element['#id'])? '': ' id='.$element['#id'])
    . drupal_attributes($element['#attributes']) . '>';
    $output .= $element['#children'];
    $output .= '</' . $element['#tag'] . ">";
    return $output;
  }
  else {
    return '';
  }
}

/**
 * Form API process function: set the #parents of the children of this element so they appear at the same level as the parent.
 * coluns are grouped under block, this will allow columns to bypass block wrapper to satisfy Feild API
 */
function ccpuriri_container_process($element, &$form_state, $form) {

  foreach (element_children($element) as $key) {
    $element[$key]['#parents'] = $element['#parents'];
    $element[$key]['#parents'][count($element[$key]['#parents']) - 1] = $key;
  }

  return $element;
}


/**
 * Form API process function:
 * add a hidden input which will trigger ajax
 *
 */
function ccpuriri_dropdownbutton_process($element, &$form_state, $form) {
   
  // always having a tree structure for UI
  $element['#tree'] = true;

  $element['selecteditem'] = array(
      '#type'=>'hidden',
      '#default_value' =>'0',
      '#attached'=>array(
          'js' => array(drupal_get_path('module', 'ccpuriri_common') . '/ccpuriri_common_dropdownbutton.js'=>
              array('group' => JS_DEFAULT, 'weight'=>500),
              array('type' => 'setting',
                  'data' => array('dropdownbuttonids'=>array($element['#id'])),
              ), // telling the client javascript the id of this element
          ),
           
      ),

  );

  if(!empty($element['#ajax']))
  {
    //customize this triggering event
    // this is important if no event set, it will not be marked as ajax element
    unset($element['#ajax']['event']);
    $element['#ajax']['event']='itemselected';

  }
  return $element;
}


/**
 * Implements hook_field_widget_info().
 * this adds a widget for long text field used in our system, using the format of 'plain_text' auto matically
 */
function ccpuriri_common_field_widget_info() {
  return array(
      'ccpuriri_common_plain_text' => array(
          'label' => t('Plain Long Text'),
          'field types' => array('text_long'), // text processing default as false
          'settings' => array('rows' => 20),
      ),
  );
}


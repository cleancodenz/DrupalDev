<?php 

/**
 * Implementation of hook_entity_info().
 */
function ccpuriri_list_entity_info() {
  $return = array(
      'ccpuriri_list' => array(
          'label' => t('List'),
          'controller class' => 'CCPuririListController',
          'base table' => 'ccpuriri_list',
          'uri callback' => 'ccpuriri_list_uri',
          'fieldable' => TRUE,
          'entity keys' => array(
              'id' => 'lid',
          ),
          'bundles' => array(
              'list' => array(
                  'label' => t('List'),
              ),
          ),
          'view modes' => array(
              'full' => array(
                  'label' => t('Full content'),
                  'custom settings' => FALSE,
              ),
              'teaser' => array(
                  'label' => t('Teaser'),
                  'custom settings' => TRUE,
              ),
          ),
      ),
  );
  return $return;

}

class CCPuririListController extends DrupalDefaultEntityController {

  function attachLoad(&$queried_lists, $revision_id = FALSE) {

    foreach ($queried_lists as  $key => $list) {

      global $user;

      // set up is_shared
      $list->is_shared = $list->uid==0;

      // set up has_childfolders

      // when adding folders to another folder it will form the hierachical structure, but
      // this is not implemented in this version
      $startTime=  microtime(TRUE);

      // set up items_count
      if ($list->is_shared)
      {
        $items = db_query('SELECT l.entity_id FROM {ccpuriri_list_item} l  WHERE l.lid = :lid AND l.uid =:uid',
            array(':lid' =>$list->lid, ':uid'=>$user->uid))->fetchAllAssoc('entity_id');
      }
      else
      {
        $items = db_query('SELECT l.entity_id FROM {ccpuriri_list_item} l  WHERE l.lid = :lid',
            array(':lid' =>$list->lid))->fetchAllAssoc('entity_id');

      }

      $list->items=  isset($items)? $items:array();

      $list->items_count = count($list->items) ;

      watchdog('ccpuriri_list',
          'Get the list items of a list, time elapsed is %timeElpased ms',
          array('%timeElpased' =>
              round((microtime(TRUE) - $startTime) * 1000,2)

          ),
          WATCHDOG_DEBUG);


    }

    // Call the default attachLoad() method. This will add fields and call
    parent::attachLoad($queried_lists, $revision_id);
  }
}


/*
 * Save a list with accesses, if user id is 0, means it is a shared folder by everyone
* Normally it is private folder, visible to owner
* */
function ccpuriri_list_save($list) {
  $transaction = db_transaction();
  try {
    $startTime=  microtime(TRUE);
     
    // Load the stored entity, if any.
    if (!empty($list->lid) && !isset($list->original)) {
      $list->original = entity_load_unchanged('ccpuriri_list', $list->lid);
    }

    field_attach_presave('ccpuriri_list', $list);

    // Determine if we will be inserting a new list.
    if (!isset($list->is_new)) {
      $list->is_new = empty($list->lid);
    }
     
    // Set the timestamp fields.
    if (empty($list->created)) {
      $list->created = REQUEST_TIME;
    }
     
    // Let modules modify the node before it is saved to the database.
    module_invoke_all('entity_presave', $list, 'ccpuriri_list');
     
    // Save the list .
    if ($list->is_new) {

      drupal_write_record('ccpuriri_list', $list);
      $op = 'insert';
    }
    else {
      // For existing list, update the list record which matches the value of
      // $list->lid.
      drupal_write_record('ccpuriri_list', $list, 'lid');

      $op = 'update';

    }
     

    module_invoke_all('entity_' . $op, $list, 'ccpuriri_list');

    // Clear internal properties.
    unset($list->is_new);
    unset($list->original);
    // Clear the static loading cache.
    entity_get_controller('ccpuriri_list')->resetCache(array($list->lid));
     
    // Ignore slave server temporarily to give time for the
    db_ignore_slave();

    // clear the list cache
     
    if ($list->uid > 0)
    {
      // only customized list can be changed
      // shared list saved by on install, can not be changed, this will only be called once to create them

      $cid ='ccpuriri_list_user'.$list->uid;
      cache_clear_all($cid,'cache_ccpuriri');

    }

    watchdog('ccpuriri_list',
        'list '.$list->lid.':'.$list->title.' saved to db, time elapsed is %timeElpased ms',
        array('%timeElpased' =>
            round((microtime(TRUE) - $startTime) * 1000,2)

        ),
        WATCHDOG_DEBUG);

  }
  catch (Exception $e) {
    $transaction->rollback();
    watchdog_exception('ccpuriri_list_save', $e);
    throw $e;
  }
}

/*
 * Delete a list when it is empty, no items and no child folders, no shared folder
* Deletion includes list, access
*
* */

function ccpuriri_list_delete($list)
{
  if ($list->is_shared || $list->items_count>0)
    return;

  $transaction = db_transaction();
  try {

    $startTime=  microtime(TRUE);

    // delete in reference table
    // even though it is not necessary, but still do it to keep data integrity
    db_delete('ccpuriri_list_item')
    ->condition('lid', $list->lid)
    ->execute();
    // delete in main table
    db_delete('ccpuriri_list')
    ->condition('lid', $list->lid)
    ->execute();
    //clear the cache

    if ($list->uid > 0)
    {
      // only customized list can be changed
      // shared list saved by on install, can not be changed, this will only be called once to create them

      $cid ='ccpuriri_list_user'.$list->uid;
      cache_clear_all($cid,'cache_ccpuriri');

    }

    watchdog('ccpuriri_list',
        'list '.$list->lid.':'.$list->title.' is deleted, time elapsed is %timeElpased ms',
        array('%timeElpased' =>
            round((microtime(TRUE) - $startTime) * 1000,2)

        ),
        WATCHDOG_DEBUG);

  }
  catch (Exception $e) {
    $transaction->rollback();
    watchdog_exception('ccpuriri_list_delete', $e);
    throw $e;
  }
}

/**
 * Loads a list object.
 *
 * @param $lid
 *   Integer specifying the list ID to load.
 * @param $reset
 *   TRUE to reset the internal cache and load from the database; FALSE
 *   (default) to load from the internal cache, if set.
 *
 * @return
 *   A fully-loaded list object upon successful list load, or FALSE if the list
 *   cannot be loaded.
 *
 * @see ccpuriri_list_load_multiple()
 */
function ccpuriri_list_load($lid) {

  //to check if it shared

  $sharedlists= ccpuriri_list_load_shared();
  if (isset($sharedlists[$lid]))
  {
    return $sharedlists[$lid];
  }
  else
  {
    $userlists= ccpuriri_list_load_user();

    if (isset($userlists[$lid]))
    {
      return $userlists[$lid];
    }

  }

  return false;
}

/**
 * Load multiple lists based on certain conditions.
 *
 * This function should be used whenever you need to load more than one list
 * from the database. Lists are loaded into memory and will not require
 * database access if loaded again during the same page request.
 *
 * @param $lids
 *   An array of list IDs.
 * @param $conditions
 *   (deprecated) An associative array of conditions on the {ccpuriri_list}
 *   table, where the keys are the database fields and the values are the
 *   values those fields must have. Instead, it is preferable to use
 *   EntityFieldQuery to retrieve a list of entity IDs loadable by
 *   this function.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset. Use this if
 *   loading a list object which has been altered during the page request.
 *
 * @return
 *   An array of list objects, indexed by lid.
 *
 * @see entity_load()
 
 * @todo Remove $conditions in Drupal 8.
 *
 * structure is
 * $sharedlists	Array [2]
 1	stdClass
 lid	1
 language
 title	Watchlist
 uid	0
 created	1377573834
 tnid	0
 translate	0
 is_shared	true
 items	Array [0]
 items_count	0
 rdf_mapping	Array [0]
 2	stdClass

 */
function ccpuriri_list_load_multiple($lids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('ccpuriri_list', $lids, $conditions, $reset);
}


/**
 * Fetch publicly shared folders.
 *
 * @return
 *   A fully-loaded $list objects upon successful list load or FALSE if list
 *   cannot be loaded.
 *
 * @see ccpuriri_list_load()
 */
function ccpuriri_list_load_shared() {

  $lists = &drupal_static(__FUNCTION__);

  if (!isset($lists))
  {
    global $user;

    // get the list from cache
    $cid ='ccpuriri_list_shared'.$user->uid;

    if ($cached = cache_get($cid, 'cache_ccpuriri')) {
      $lists = $cached->data;
    }
    else {
      $lists = ccpuriri_list_load_multiple(array(), array('uid' =>0));

      cache_set($cid, $lists, 'cache_ccpuriri');
    }

  }

  return $lists;

}

/**
 * Fetch all folders for this user, it is cached, static too
 * the lists include shared lists and user created lists as well
 * the items count of per list is also loaded
 *
 * @return
 *   A fully-loaded $list objects upon successful list load or FALSE if list
 *   cannot be loaded.
 *
 * @see ccpuriri_list_load()
 */
function ccpuriri_list_load_user() {

  $startTime=  microtime(TRUE);

  $lists = &drupal_static(__FUNCTION__);

  if (!isset($lists))
  {
    global $user;

    // get the list from cache
    $cid ='ccpuriri_list_user'.$user->uid;

    if ($cached = cache_get($cid, 'cache_ccpuriri')) {
      $lists = $cached->data;
    }
    else {
      $lists = ccpuriri_list_load_multiple(array(), array('uid' =>$user->uid));

      // uasort
      uasort($lists,'_ccpuriri_list_sort_by_title');

      cache_set($cid, $lists, 'cache_ccpuriri');
    }

    watchdog('ccpuriri_list',
        'User '.$user->uid.' defined lists are loaded, time elapsed is %timeElpased ms',
        array('%timeElpased' =>
            round((microtime(TRUE) - $startTime) * 1000,2)

        ),
        WATCHDOG_DEBUG);


  }
   
  return $lists;
}


/**
 * add a node to the list.
 *
 * @return
 *   no return
 *  
 */
function ccpuriri_list_add_node($listid,$nodeid,$nodetype,$nodebundle) {
 
    $startTime=  microtime(TRUE);
  
    // Load the stored entity, if any.
    if (!empty($list->lid) && !isset($list->original)) {
      $list->original = entity_load_unchanged('ccpuriri_list', $list->lid);
    }
  
    field_attach_presave('ccpuriri_list', $list);
  
    // Determine if we will be inserting a new list.
    if (!isset($list->is_new)) {
      $list->is_new = empty($list->lid);
    }
  
    // Set the timestamp fields.
    if (empty($list->created)) {
      $list->created = REQUEST_TIME;
    }
  
    // Let modules modify the node before it is saved to the database.
    module_invoke_all('entity_presave', $list, 'ccpuriri_list');
  
    // Save the list .
    if ($list->is_new) {
  
      drupal_write_record('ccpuriri_list', $list);
      $op = 'insert';
    }
    else {
      // For existing list, update the list record which matches the value of
      // $list->lid.
      drupal_write_record('ccpuriri_list', $list, 'lid');
  
      $op = 'update';
  
    }
  
  
    module_invoke_all('entity_' . $op, $list, 'ccpuriri_list');
  
    // Clear internal properties.
    unset($list->is_new);
    unset($list->original);
    // Clear the static loading cache.
    entity_get_controller('ccpuriri_list')->resetCache(array($list->lid));
  
    // Ignore slave server temporarily to give time for the
    db_ignore_slave();
  
    // clear the list cache
  
    if ($list->uid > 0)
    {
      // only customized list can be changed
      // shared list saved by on install, can not be changed, this will only be called once to create them
  
      $cid ='ccpuriri_list_user'.$list->uid;
      cache_clear_all($cid,'cache_ccpuriri');
  
    }
  
    watchdog('ccpuriri_list',
       'add node: '.$nodeid.' node type: '.$nodetype.' node bundle: '
         .$nodebundle. ' to list: '.$listid.', time elapsed is %timeElpased ms',
        array('%timeElpased' =>
            round((microtime(TRUE) - $startTime) * 1000,2)
  
        ),
        WATCHDOG_DEBUG);
  
 
}



/**
 * Array sorting callback; sorts lists by title.
 */
function  _ccpuriri_list_sort_by_title($a, $b) {
  return strnatcasecmp($a->title, $b->title);
}


/**
 * Implementation of hook_menu().
 */
function ccpuriri_list_menu() {

  $items['list'] = array(
      'title' => t('My Lists'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('ccpuriri_list_form'),
      'access callback' => true,//'user_is_logged_in',
      'menu_name' => 'ccpuririlistnavigation',
      'weight' =>10,
      'options'=>array(
          'icon'=>'icon-folder-open',
          'html'=>true,
      ),
      'file' =>'ccpuriri_list.pages.inc'
  );

  // list add
  $items['list/add'] = array(
      'title' => t('Add list'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('ccpuriri_list_edit_form','add'),
      'access callback' => 'user_is_logged_in',
      'description' => 'Add a user list',
      'menu_name' => 'ccpuririlistnavigation',
      'file' => 'ccpuriri_list.pages.inc',
  );

  // list view
  $items['list/%ccpuriri_list'] = array(
      'title' => 'My listsss',
      'title callback' => 'ccpuriri_list_page_title',
      'title arguments' => array(1),
      // The page callback also invokes drupal_set_title() in case
      // the menu router's title is overridden by a menu link.
      'page callback' => 'ccpuriri_list_page_view',
      'page arguments' => array(1),
      'access callback' => 'ccpuriri_list_access',
      'access arguments' => array('view', 1),
      'menu_name' => 'ccpuririlistnavigation',

      'file' => 'ccpuriri_list.pages.inc',
  );

  $items['list/%ccpuriri_list/edit'] = array(
      'title' => t('Edit'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('ccpuriri_list_edit_form','edit', 1),
      'access callback' => 'ccpuriri_list_access',
      'access arguments' => array('update', 1),
      'weight' => 0,
      'menu_name' => 'ccpuririlistnavigation',
      'file' => 'ccpuriri_list.pages.inc',
  );
  $items['list/%ccpuriri_list/delete'] = array(
      'title' => t('Delete'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('ccpuriri_list_delete_confirm', 1),
      'access callback' => 'ccpuriri_list_access',
      'access arguments' => array('delete', 1),
      'weight' => 1,
      'menu_name' => 'ccpuririlistnavigation',
      'file' => 'ccpuriri_list.pages.inc',
  );

  return $items;
}


function ccpuriri_list_access($op, $list, $account = NULL) {
  $rights = &drupal_static(__FUNCTION__, array());

  if (!$list || !in_array($op, array('view', 'update', 'delete', 'create'), TRUE)) {
    // If there was no list to check against, or the $op was not one of the
    // supported ones, we return access denied.
    return FALSE;
  }
  // If no user object is supplied, the access check is for the current user.
  if (empty($account)) {
    $account = $GLOBALS['user'];
  }
   

  $cid = $list->lid ;

  // If we've already checked access for this list, user and op, return from
  // cache.
  if (isset($rights[$account->uid][$cid][$op])) {
    return $rights[$account->uid][$cid][$op];
  }


  // public shared list, can view only
  if($list->is_shared)
  {
    if($op == 'view')
    {
      $rights[$account->uid][$cid][$op] = TRUE;
      return TRUE;

    }

  }
  elseif($list->uid == $account->uid)
  {
    if($op == 'delete')
    {
      $rights[$account->uid][$cid][$op] = !($list->items_count>0);

      return $rights[$account->uid][$cid][$op] ;
    }

    $rights[$account->uid][$cid][$op] = TRUE;

    return TRUE;
  }
   
  $rights[$account->uid][$cid][$op] = FALSE;
  return FALSE;

}

/**
 * Title callback.
 */
function ccpuriri_list_page_title($list) {
  return $list->title.'('.$list->items_count.')';
}

/**
 * Get the root menu link (/list on navigation).
 */
function ccpuriri_list_root_menu_link_id() {

  $query = db_query('SELECT mlid FROM menu_links where link_path =:link_path AND menu_name=:menu_name',
      array(':link_path'=>'list',
          ':menu_name'=>'ccpuririlistnavigation',));

  return $query->fetchField();

}

/**
 *
 *The list menu has some special characters
 *
 * in one sentence, list/% is only visible when a custom list is currently requested,
 * in other scenarios, % is returned, and no show
 *
 *for custom lists :
 *
 * they are not handled by menu system,
 * but will be inserted to menu tree separately,
 * and activate list/% when it is requested, this why here we need to return a valid id when a custom list is requested
 *
 *for shared lists (system lists)
 *they have duplicated in menu links, as we have list/% and list/1 and list/2 as menu links
 *when shared list is requested like /list/1, it returns % which will make list/% invisible, while list/1 is visible
 *
 *
 */
function ccpuriri_list_to_arg($arg) {

  $current_router_item = menu_get_item();

  if (strpos($current_router_item['path'], 'list/%') === 0)
  {
    // as we have list/% and list/1 both menu links in menu_links
     
    // this allows list/% to show
    if ($arg=='%')
    {
      // this is menu_link list/%, feed it with current item lid
      // current item already loaded by menu_get_item()
      // only provide custom lists
      // system lists, just use links like list/1, as there is no edit/delete necessary for system

      if(isset($current_router_item['map'][1]) &&
          property_exists($current_router_item['map'][1], 'lid'))
      {
        if(!$current_router_item['map'][1]->is_shared)
        {
          return $current_router_item['map'][1]->lid;
        }
      }
    }

  }

  return $arg;
}

/**
 *
 *hook_node_view
 *
 * add add to list and remove from list functionalities to a rental node view,
 *
 *
 */
function ccpuriri_list_node_view($node, $view_mode) {
  if ($view_mode == 'full') {
    // Only append comments when we are building a node on its own node detail
    // page. We compare $node and $page_node to ensure that comments are not
    // appended to other nodes shown on the page, for example a node_reference
    // displayed in 'full' view mode within another node.
    if ($node->type == 'ccpuriri_rental'  && node_is_page($node) ) {

      $node->content['ccpuriri_list'] = ccpuriri_list_node_page_additions($node);

    }
  }
}

function ccpuriri_list_node_page_additions($node) {

 
  $additions = array();

  $form_args= array(
      'nid'=>  $node->nid,
      'node_type'=>  $node->type,
   );


  $build = drupal_get_form("ccpuriri_list_addremove_form",  $form_args);


  $additions['ccpuriri_list_addremove_form'] = $build;

  return $additions;

}

function _ccpuriri_list_convert_list_to_dropdownitem($list)
{
  return array(
      'id'=> $list->lid,
      'description' => $list->title,
  );

}

/**
 * this is used by initial list form rendering and call back of with list changes and all
 * 
 * **/
function ccpuriri_list_addremove_form($form, &$form_state, $args)
{
 
  if (user_is_anonymous())
  {
    // just give them an indicative disabled button
    
    $form['addbutton']= array(
        '#type' => 'button',
        '#value' => t('Add to List'),
        '#attributes'=>array(
            'title'=> 'You need to log in',
            'disabled'=>true,
        ),
    );
  }
  else
  {
    // logged in user
     
    if (!empty($form_state['triggering_element']))
    {
      if ($form_state['triggering_element']['#name']=='addbutton'
          &&!empty($form_state['values']['addbutton']['selecteditem']) 
          && $form_state['values']['addbutton']['selecteditem'] > 0)
      {
         // to get the selected item value
         // this is to add the node to the selected list
         
                 
  
      }
      
    }
    
    $toaddlists=array();
    $toremovelists=array();
    
   
      // get list
      $sharedlists=  ccpuriri_list_load_shared();
    
      foreach($sharedlists as $list)
      {
        // not checking contains at moment, add straigh away
        $toaddlists[] =
        _ccpuriri_list_convert_list_to_dropdownitem($list);
    
      }
    
      $userlists=  ccpuriri_list_load_user();
      if (!empty($userlists) && sizeof($userlists)>0)
      {
        // add a devider
        $toaddlists[] = array(
            'id'=>0,
            'description'=>'',
        );
    
        foreach($userlists as $list)
        {
          // not checking contains at moment, add straigh away
    
         $toaddlists[] =
          _ccpuriri_list_convert_list_to_dropdownitem($list);
    
        }
      }
    
   
    
    
    
    // start rendering
      
    
    //add a wrapper
    $form['list_block'] = array(
        '#type' => 'ccpuriri_container',
         '#id' => 'list-block',// set a id for this wrapper
        );
    
    
    // get to add lists
    if (sizeof($toaddlists))
    {
      $form['list_block']['addbutton']= array(
          '#type' => 'ccpuriri_dropdownbutton',
          '#value' => t('Add to List'),
          '#attributes'=>array(),
          '#colorcode' =>'info',
          '#items' => $toaddlists,
          '#ajax' =>array(
              'wrapper'=>'list-block',
              'callback'=> 'ccpuriri_list_addremove_form_callback',
           ), 
      );
    }

    // added lists

  }
  return $form;
}

function ccpuriri_list_addremove_form_callback($form, &$form_state)
{
    return $form['list_block'];
    
}

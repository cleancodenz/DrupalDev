<?php 

/**
 * Implementation of hook_entity_info().
 */
function ccpuriri_list_entity_info() {
  $return = array(
      'ccpuriri_list' => array(
          'label' => t('List'),
          'controller class' => 'CCPuririListController',
          'base table' => 'ccpuriri_list',
          'uri callback' => 'ccpuriri_list_uri',
          'fieldable' => TRUE,
          'entity keys' => array(
              'id' => 'lid',
          ),
          'bundles' => array(
              'list' => array(
                  'label' => t('List'),
              ),
          ),
          'view modes' => array(
              'full' => array(
                  'label' => t('Full content'),
                  'custom settings' => FALSE,
              ),
              'teaser' => array(
                  'label' => t('Teaser'),
                  'custom settings' => TRUE,
              ),
          ),
      ),
  );
  return $return;

}

class CCPuririListController extends DrupalDefaultEntityController {

  function attachLoad(&$queried_lists, $revision_id = FALSE) {
    
    foreach ($queried_lists as  $key => $list) {
      // set up is_shared
      $list->is_shared = $list->uid==0;
      // set up has_childfolders
      $childfoldercount = db_query('SELECT count(l.lid) FROM {ccpuriri_list} l  WHERE l.plid = :plid', array(':plid' =>$list->lid))->fetchField();
            
      $list->has_childfolders = isset($childfoldercount) && ($childfoldercount > 0);
      // set up has_items
      $itemscount = db_query('SELECT count(l.lnid) FROM {ccpuriri_list_node} l  WHERE l.lid = :lid', array(':lid' =>$list->lid))-> fetchField();
      
      $list->has_items = isset($itemscount) && ($itemscount > 0);
      
    }
    
    // Call the default attachLoad() method. This will add fields and call
    parent::attachLoad($queried_lists, $revision_id);
  }
}


/*
 * Save a list with accesses, if user id is 0, means it is a shared folder by everyone
 * Normally it is private folder, visible to owner 
 * */
function ccpuriri_list_save($list, $users =array()) {
  $transaction = db_transaction();
  try {
     
    // Load the stored entity, if any.
    if (!empty($list->lid) && !isset($list->original)) {
      $list->original = entity_load_unchanged('ccpuriri_list', $list->lid);
    }

    field_attach_presave('ccpuriri_list', $list);

    // Determine if we will be inserting a new list.
    if (!isset($list->is_new)) {
      $list->is_new = empty($list->lid);
    }
     
    // Set the timestamp fields.
    if (empty($list->created)) {
      $list->created = REQUEST_TIME;
    }
     
    // Let modules modify the node before it is saved to the database.
    module_invoke_all('entity_presave', $list, 'ccpuriri_list');
     
    // Save the list .
    if ($list->is_new) {

      drupal_write_record('ccpuriri_list', $list);
      $op = 'insert';
    }
    else {
      // For existing list, update the list record which matches the value of
      // $list->lid.
      drupal_write_record('ccpuriri_list', $list, 'lid');

      // delete existing access
      db_delete('ccpuriri_list_access')
      ->condition('lid',$list->lid)
      ->execute();
      
      $op = 'update';
      
    }
     
    // save access
    $insert =  db_insert('ccpuriri_list_access')
    ->fields(array(
        'lid',
        'uid',
        ));
     
    foreach ($users as $uid)
    {
      $insert->values(array(
          'lid' => $list->lid,
          'uid' => $uid,
          ));
      
    }
    
    $insert->execute();
    
    
    module_invoke_all('entity_' . $op, $list, 'ccpuriri_list');
 
    // Clear internal properties.
    unset($list->is_new);
    unset($list->original);
    // Clear the static loading cache.
    entity_get_controller('ccpuriri_list')->resetCache(array($list->lid));
     
    // Ignore slave server temporarily to give time for the
    db_ignore_slave();
  }
  catch (Exception $e) {
    $transaction->rollback();
    watchdog_exception('ccpuriri_list_save', $e);
    throw $e;
  }
}

/*
 * Delete a list when it is empty, no items and no child folders, no shared folder
 * Deletion includes list, access  
 * 
 * */

function ccpuriri_list_delete($list)
{
  if ($list->is_shared || $list->has_childfolders ||$list->has_items)
    return;
  
  $transaction = db_transaction();
  try {
    
    
  }
  catch (Exception $e) {
    $transaction->rollback();
    watchdog_exception('ccpuriri_list_delete', $e);
    throw $e;
  }
}

/**
 * Loads a list object.
 *
 * @param $lid
 *   Integer specifying the list ID to load.
 * @param $reset
 *   TRUE to reset the internal cache and load from the database; FALSE
 *   (default) to load from the internal cache, if set.
 *
 * @return
 *   A fully-loaded list object upon successful list load, or FALSE if the list
 *   cannot be loaded.
 *
 * @see ccpuriri_list_load_multiple()
 */
function ccpuriri_list_load($lid, $reset = FALSE) {
  $lists = ccpuriri_list_load_multiple(array($lid), array(), $reset);
  return reset($lists);
}

/**
 * Load multiple lists based on certain conditions.
 *
 * This function should be used whenever you need to load more than one list
 * from the database. Lists are loaded into memory and will not require
 * database access if loaded again during the same page request.
 *
 * @param $lids
 *   An array of list IDs.
 * @param $conditions
 *   (deprecated) An associative array of conditions on the {ccpuriri_list}
 *   table, where the keys are the database fields and the values are the
 *   values those fields must have. Instead, it is preferable to use
 *   EntityFieldQuery to retrieve a list of entity IDs loadable by
 *   this function.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset. Use this if
 *   loading a list object which has been altered during the page request.
 *
 * @return
 *   An array of list objects, indexed by lid.
 *
 * @see entity_load()
 * @see ccpuriri_list_load()
 * @see ccpuriri_list_load_shared()
 *
 * @todo Remove $conditions in Drupal 8.
 */
function ccpuriri_list_load_multiple($lids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('ccpuriri_list', $lids, $conditions, $reset);
}


/**
 * Fetch top shared folders.
 *
 * @return
 *   A fully-loaded $list objects upon successful list load or FALSE if list
 *   cannot be loaded.
 *
* @see ccpuriri_list_load()
 */
function ccpuriri_list_load_shared() {
  $lists = ccpuriri_list_load_multiple(array(), array('uid' =>0,'liid' =>0));
  return reset($lists);
}

/**
 * Implementation of hook_menu().
 */
function ccpuriri_list_menu() {
 
  $items['list'] = array(
      'title' => 'My list',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('ccpuriri_list_form'),
      'access callback' => 'user_is_logged_in',
      'menu_name' => 'ccpuririlistnavigation',
      'weight' =>10,
      'file' =>'ccpuriri_list.pages.inc'
  );
  
  return $items;
}

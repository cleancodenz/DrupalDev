<?php 

/**
 * Implementation of hook_entity_info().
 */
function ccpuriri_list_entity_info() {
  $return = array(
      'ccpuriri_list' => array(
          'label' => t('List'),
          'controller class' => 'CCPuririListController',
          'base table' => 'ccpuriri_list',
          'uri callback' => 'ccpuriri_list_uri',
          'fieldable' => TRUE,
          'entity keys' => array(
              'id' => 'lid',
          ),
          'bundles' => array(
              'list' => array(
                  'label' => t('List'),
              ),
          ),
          'view modes' => array(
              'full' => array(
                  'label' => t('Full content'),
                  'custom settings' => FALSE,
              ),
              'teaser' => array(
                  'label' => t('Teaser'),
                  'custom settings' => TRUE,
              ),
          ),
      ),
  );
  return $return;

}

class CCPuririListController extends DrupalDefaultEntityController {

  function attachLoad(&$queried_lists, $revision_id = FALSE) {
    
    foreach ($queried_lists as  $key => $list) {
      
      global $user;
      
      // set up is_shared
      $list->is_shared = $list->uid==0;
      
      // set up has_childfolders
      
      // when adding folders to another folder it will form the hierachical structure, but 
      // this is not implemented in this version      
       
      // set up items_count
      if ($list->is_shared)
      {
        $items = db_query('SELECT l.entity_id FROM {ccpuriri_list_item} l  WHERE l.lid = :lid AND l.uid =:uid',
             array(':lid' =>$list->lid, ':uid'=>$user->uid))->fetchAllAssoc('entity_id');
      }
      else
      {
        $items = db_query('SELECT l.entity_id FROM {ccpuriri_list_item} l  WHERE l.lid = :lid',
            array(':lid' =>$list->lid))->fetchAllAssoc('entity_id');
        
      }
      
      $list->items=  isset($items)? $items:array();
      
      $list->items_count = count($list->items) ;
      
      
    }
    
    // Call the default attachLoad() method. This will add fields and call
    parent::attachLoad($queried_lists, $revision_id);
  }
}


/*
 * Save a list with accesses, if user id is 0, means it is a shared folder by everyone
 * Normally it is private folder, visible to owner 
 * */
function ccpuriri_list_save($list) {
  $transaction = db_transaction();
  try {
     
    // Load the stored entity, if any.
    if (!empty($list->lid) && !isset($list->original)) {
      $list->original = entity_load_unchanged('ccpuriri_list', $list->lid);
    }

    field_attach_presave('ccpuriri_list', $list);

    // Determine if we will be inserting a new list.
    if (!isset($list->is_new)) {
      $list->is_new = empty($list->lid);
    }
     
    // Set the timestamp fields.
    if (empty($list->created)) {
      $list->created = REQUEST_TIME;
    }
     
    // Let modules modify the node before it is saved to the database.
    module_invoke_all('entity_presave', $list, 'ccpuriri_list');
     
    // Save the list .
    if ($list->is_new) {

      drupal_write_record('ccpuriri_list', $list);
      $op = 'insert';
    }
    else {
      // For existing list, update the list record which matches the value of
      // $list->lid.
      drupal_write_record('ccpuriri_list', $list, 'lid');
      
      $op = 'update';
      
    }
   
    
    module_invoke_all('entity_' . $op, $list, 'ccpuriri_list');
 
    // Clear internal properties.
    unset($list->is_new);
    unset($list->original);
    // Clear the static loading cache.
    entity_get_controller('ccpuriri_list')->resetCache(array($list->lid));
     
    // Ignore slave server temporarily to give time for the
    db_ignore_slave();
  }
  catch (Exception $e) {
    $transaction->rollback();
    watchdog_exception('ccpuriri_list_save', $e);
    throw $e;
  }
}

/*
 * Delete a list when it is empty, no items and no child folders, no shared folder
 * Deletion includes list, access  
 * 
 * */

function ccpuriri_list_delete($list)
{
  if ($list->is_shared || $list->items_count>0)
    return;
  
  $transaction = db_transaction();
  try {
    
    
  }
  catch (Exception $e) {
    $transaction->rollback();
    watchdog_exception('ccpuriri_list_delete', $e);
    throw $e;
  }
}

/**
 * Loads a list object.
 *
 * @param $lid
 *   Integer specifying the list ID to load.
 * @param $reset
 *   TRUE to reset the internal cache and load from the database; FALSE
 *   (default) to load from the internal cache, if set.
 *
 * @return
 *   A fully-loaded list object upon successful list load, or FALSE if the list
 *   cannot be loaded.
 *
 * @see ccpuriri_list_load_multiple()
 */
function ccpuriri_list_load($lid, $reset = FALSE) {
  $lists = ccpuriri_list_load_multiple(array($lid), array(), $reset);
  return reset($lists);
}

/**
 * Load multiple lists based on certain conditions.
 *
 * This function should be used whenever you need to load more than one list
 * from the database. Lists are loaded into memory and will not require
 * database access if loaded again during the same page request.
 *
 * @param $lids
 *   An array of list IDs.
 * @param $conditions
 *   (deprecated) An associative array of conditions on the {ccpuriri_list}
 *   table, where the keys are the database fields and the values are the
 *   values those fields must have. Instead, it is preferable to use
 *   EntityFieldQuery to retrieve a list of entity IDs loadable by
 *   this function.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset. Use this if
 *   loading a list object which has been altered during the page request.
 *
 * @return
 *   An array of list objects, indexed by lid.
 *
 * @see entity_load()
 * @see ccpuriri_list_load()
 * @see ccpuriri_list_load_shared()
 *
 * @todo Remove $conditions in Drupal 8.
 */
function ccpuriri_list_load_multiple($lids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('ccpuriri_list', $lids, $conditions, $reset);
}


/**
 * Fetch publicly shared folders.
 *
 * @return
 *   A fully-loaded $list objects upon successful list load or FALSE if list
 *   cannot be loaded.
 *
* @see ccpuriri_list_load()
 */
function ccpuriri_list_load_shared() {
  $lists = ccpuriri_list_load_multiple(array(), array('uid' =>0));
  return $lists;
}

/**
 * Implementation of hook_menu().
 */
function ccpuriri_list_menu() {
 
  $items['list'] = array(
      'title' => t('My lists'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('ccpuriri_list_form'),
      'access callback' => true,//'user_is_logged_in',
      'menu_name' => 'ccpuririlistnavigation',
      'weight' =>10,
      'options'=>array(
          'icon'=>'icon-folder-open',
          'html'=>true,
      ),
      'file' =>'ccpuriri_list.pages.inc'
  );
  
  // list add
  $items['list/add'] = array(
      'title' => t('Add list'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('ccpuriri_list_edit_form','add'),
      'access callback' => 'user_is_logged_in',
      'description' => 'Add a user list',
      'menu_name' => 'ccpuririlistnavigation',
      'file' => 'ccpuriri_list.pages.inc',
  );
  
  // list view
  $items['list/%ccpuriri_list'] = array(
      'title' => 'My listsss',
      'title callback' => 'ccpuriri_list_page_title',
      'title arguments' => array(1),
      // The page callback also invokes drupal_set_title() in case
      // the menu router's title is overridden by a menu link.
      'page callback' => 'ccpuriri_list_page_view',
      'page arguments' => array(1),
      'access callback' => 'ccpuriri_list_access',
      'access arguments' => array('view', 1),
      'menu_name' => 'ccpuririlistnavigation',
      'file' => 'ccpuriri_list.pages.inc',
  );
  
  $items['list/%ccpuriri_list/edit'] = array(
      'title' => t('Edit'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('ccpuriri_list_edit_form','edit', 1),
      'access callback' => 'ccpuriri_list_access',
      'access arguments' => array('update', 1),
      'weight' => 0,
      'menu_name' => 'ccpuririlistnavigation',
      'file' => 'ccpuriri_list.pages.inc',
  );
  $items['list/%ccpuriri_list/delete'] = array(
      'title' => t('Delete'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('ccpuriri_list_delete_confirm', 1),
      'access callback' => 'ccpuriri_list_access',
      'access arguments' => array('delete', 1),
      'weight' => 1,
      'menu_name' => 'ccpuririlistnavigation',
      'file' => 'ccpuriri_list.pages.inc',
  );
  
  return $items;
}


function ccpuriri_list_access($op, $list, $account = NULL) {
  $rights = &drupal_static(__FUNCTION__, array());

  if (!$list || !in_array($op, array('view', 'update', 'delete', 'create'), TRUE)) {
    // If there was no list to check against, or the $op was not one of the
    // supported ones, we return access denied.
    return FALSE;
  }
  // If no user object is supplied, the access check is for the current user.
  if (empty($account)) {
    $account = $GLOBALS['user'];
  }


  $cid = $list->lid ;

  // If we've already checked access for this list, user and op, return from
  // cache.
  if (isset($rights[$account->uid][$cid][$op])) {
    return $rights[$account->uid][$cid][$op];
  }

  
  // public shared list, can view only
  if($list->is_shared)
  {
    if($op == 'view')
    {
      $rights[$account->uid][$cid][$op] = TRUE;
      return TRUE;
      
    }
    
  } 
  elseif($list->uid == $account->uid)
  {
    if($op == 'delete')
    {      
      $rights[$account->uid][$cid][$op] = !($list->items_count>0);
      
      return $rights[$account->uid][$cid][$op] ;
    }
      
    $rights[$account->uid][$cid][$op] = TRUE;
    
    return TRUE;
  }
     
  $rights[$account->uid][$cid][$op] = FALSE;
  return FALSE;
  
}

/**
 * Title callback.
 */
function ccpuriri_list_page_title($list) {
  return $list->title.'('.$list->items_count.')';
}

/**
 * Get the root menu link (/list on navigation).
 */
function ccpuriri_list_root_menu_link_id() {
 
  $query = db_query('SELECT mlid FROM menu_links where link_path =:link_path AND menu_name=:menu_name', 
      array(':link_path'=>'list',
         ':menu_name'=>'ccpuririlistnavigation',));
  
  return $query->fetchField();
  
}

/**
 * Returns $arg or the user ID of the current list if $arg is '%' or empty.
 *
 *The list menu has some special characters
 *
 *when /list is the live path
 *then list should display all possible list, in this case, list/% will not appear, nor its list/%/edit and list/%/delete
 *
 *when /list/1 is the live path
 *
 *then the list should display all possible list, and plus list/% , its list/%/edit and list/%/delete
 * we also have a static list/1 item defined which we need to remove 
 *
 */
function ccpuriri_list_to_arg($arg) {
  
  $current_router_item = menu_get_item();
  
  //list/% default not showing up by returning % 
    
  if ($current_router_item['path']=='list/%')
  {
    // as we have list/% and list/1 both menu links in menu_links
    
    // only play with particular list request
    // this allows list/% to show, but list/1 no show
    if ($arg=='%')
    {
      // make it visible by providing the visitted list id
      if(isset($current_router_item['map'][1]) &&
    property_exists($current_router_item['map'][1], 'lid')) 
      {
        return $current_router_item['map'][1]->lid;
      }
    }
    else
    {
      return '%';
    } 
     
  }
 
  return $arg;
}


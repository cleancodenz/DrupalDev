<?php 

/**
 * Implementation of hook_node_info().
 */
function ccpuriri_rental_node_info() {

  $types['ccpuriri_rental'] = array(
      'name' => t('CCPuriri rental'),
      'base' => 'node_content',
      'description' => t('Use for rental managment.'),

  );
  return $types;
}


/**
 * Implementation of hook_menu().
 */
function ccpuriri_rental_menu() {

  // this item appears on main menu and ccpuririrentalnavigation and all
  $items['rental'] = array(
      'title' => t('Rentals'),
      'page callback' => '_ccpuriri_rental_list_page',
      'access arguments' => array('access content'),
      'menu_name' => 'main-menu',
      'weight' =>10,
      'options'=>array(
          'icon'=>'th',
          'html'=>true,
      ),
      // We only display the top level, child here to indicate the active trail
      'expanded' => 0,
      'file' =>'ccpuriri_rental.pages.inc'
  );

  // rental add
  $items['rental/add'] = array(
      'title' => t('Add'),
      'title callback' => 'check_plain',
      'page callback' => 'node_add',
      'page arguments' => array('ccpuriri_rental'),
      'access callback' => 'node_access',
      'access arguments' => array('create', 'ccpuriri_rental'),
      'description' => 'Add a rental',
      'menu_name' => 'main-menu',
      'file' => 'node.pages.inc',
      'file path' =>drupal_get_path('module', 'node'), 
  );

  // rental view
  // we have ccpuriri_rental_menu_to_arg implemented to make it appear in the memu tree
  // we also have ccpuriri_rental_menu_load implemented to make it load
  $items['rental/%ccpuriri_rental_menu'] = array(
      'title' => 'My rental',// just to trigger title callback, will not be displayed
      'title callback'  => 'node_page_title',
      'title arguments' => array(1),
      // The page callback also invokes drupal_set_title() in case
      // the menu router's title is overridden by a menu link.
      'page callback' => 'node_page_view',
      'page arguments' => array(1),
      'access callback' => 'node_access',
      'access arguments' => array('view', 1),
      'menu_name' => 'main-menu',

  );

  $items['rental/%ccpuriri_rental_menu/edit'] = array(
      'title' => t('Edit'),
      'weight' =>1000,
      'page callback' => 'node_page_edit',
      'page arguments' => array(1),
      'access callback' => 'node_access',
      'access arguments' => array('update', 1),
      'menu_name' => 'main-menu',
      'weight' => 0,
      'file' => 'node.pages.inc',
      'file path' =>drupal_get_path('module', 'node'),
  );

  return $items;
}

/**
 * Loads an item based on its $id.
 * it is node, so just call node_load
 *
 * @param $id
 */
function ccpuriri_rental_menu_load($rentalid) {
 return node_load($rentalid);
}


/**
 * A to_arg() function is used to provide a default for the arg in the
 * wildcard. The purpose is to provide a menu link that will function if no
 * argument is given.  when the to_arg() function is
 * provided, the menu system will create a menu link pointing to the path
 * which would be created with the to_arg() function 
 *
 * @param $arg
 *   The arg (URL fragment) to be tested.
 */
function ccpuriri_rental_menu_to_arg($arg) {
  
  $result='%';
  
  // If our argument is not provided, try to find if current item is node
  if (empty($arg) || $arg == '%')
  {
    $item= menu_get_item();
    if($item['path']=='rental/%' ||
        $item['path']=='rental/%/edit' )
    {
      if (sizeof($item['original_map'])>=2)
      {
        // the second is the rental id
        $result= $item['original_map'][1];
        
      }
      
    }
  }
  else
  {
    $result= $arg;
  }

  return $result;
}


/**
 * Implements hook_entity_info_alter().
 * just add uri_callback for bundles[ccpuriri+rental][uri_callback]= 'rental/'.nodeid
 * it will not affect pathauto generate beautiful uri, as it is based on entity to generate new b uri, not the original 
 * so when it is set to rental/[node:title] it will just generate that.
 * 
 *  Add the 'ccpuriri_rental_list_view' view mode for nodes. 
 */
function ccpuriri_rental_entity_info_alter(&$entity_info) {
  
  if (!empty($entity_info['node']['bundles']['ccpuriri_rental'])) 
  {
    $entity_info['node']['bundles']['ccpuriri_rental']['uri callback'] = 'ccpuriri_rental_uri';
  }
  
  // Add the 'ccpuriri_rental_list_view' view mode for nodes.
  $entity_info['node']['view modes'] += array(
      'ccpuriri_rental_list_view' => array(
          'label' => t('Rental List View'),
          'custom settings' => TRUE, // make it appear in manage display
      ),
  );
  
}

/*
 * this changes all node/id for rental into rental/id, it works with pathauto as well
 * */
function ccpuriri_rental_uri($node)
{
  return array(
      'path' => 'rental/' . $node->nid,
  );
  
}



/**
 * A theme preprocess function for node to automatically allow teaser based template
 * using hook_preprocess_node
 */
function ccpuriri_rental_preprocess_node(&$variables) {
  if ($variables['view_mode']=='ccpuriri_rental_list_view' &&  $variables['type']=='ccpuriri_rental') {
    
    $variables['theme_hook_suggestions'][] = 'node__ccpuriri_rental__ccpuriri_rental_list_view';
    

  }
}



/**
 * Implements hook_translated_menu_link_alter(). for rental/%
 */
function ccpuriri_rental_translated_menu_link_alter(&$link) {
  // add named tags.
  if ($link['link_path'] == '#address' && $link['module'] == 'menu') {

    $link['access'] = true;
    // set the title, as it has not gone through _menu_item_localize()
    $link['title'] = $link['link_title'];
   
    // to fake external in order not to be prefixed with base in url
    $link['options']['external'] = true;
    
    //this has been set in menu_item_localize which has been bypassed
    $link['localized_options'] = $link['options'];
    
  }
}


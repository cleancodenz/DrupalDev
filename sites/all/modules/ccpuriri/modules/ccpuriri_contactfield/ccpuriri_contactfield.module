<?php 

require_once (dirname(__FILE__) . '/ccpuriri_contactfield.widget.inc');

/**
 * Implements hook_field_info()
 */
function ccpuriri_contactfield_field_info() {
  $fields = array();

  $fields['ccpuriri_contactfield'] = array(
      'label' => t('Contact'),
      'description' => t('A field type used for storing contact details.'),
      'settings' => array(),
      'instance_settings' => array(),
      'default_widget' => 'ccpuriri_contactfield_standard',
      'default_formatter' => 'ccpuriri_contactfield_default',
  );

  return $fields;
}

/**
 * Implements hook_field_is_empty()
 */
function ccpuriri_contactfield_field_is_empty($item, $field) {
  if (!is_array($item) || (
      empty($item['first_name'])
      && empty($item['last_name'])
      && empty($item['organisation_name']))) {
    return TRUE;
  }
  return FALSE;

}


/**
 * Implements hook_field_widget_info()
 */
function ccpuriri_contactfield_field_widget_info() {
  $widgets = array();

  $widgets['ccpuriri_contactfield_standard'] = array(
      'label' => t('CCPuriri contact form'),
      'field types' => array('ccpuriri_contactfield'),
      'settings' => array(),
      'behaviors' => array(
          'multiple values' => FIELD_BEHAVIOR_DEFAULT, // allow multiple copies and multiple widgets
      ),
  );

  return $widgets;

}

/**
 * Implements  hook_field_widget_settings_form
 */
function ccpuriri_contactfield_field_widget_settings_form($field, $instance)
{
  $widget = $instance['widget'];
  $settings = $widget['settings'];


  return $form;

}


/**
 * Implements hook_field_widget_form()
 */
function ccpuriri_contactfield_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {

  // if it is wrapped in fieldset, it will have a legend
  // $element['#type'] = 'fieldset';
  $element = ccpuriri_contactfield_generate(
      $form, $form_state, $field, $instance, $langcode,
      $items, $delta, $element);


  return $element;
}




/**
 * Implements hook_field_formatter_info().
 */
function ccpuriri_contactfield_field_formatter_info() {
  return array(
      'ccpuriri_contactfield_default' => array(
          'label' => t('Default'),
          'field types' => array('ccpuriri_contactfield'),
          'settings' => array(),
      ),
  );
}


/**
 * Implements hook_field_formatter_view().
 */
function ccpuriri_contactfield_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $settings = $display['settings'];
  $element = array();

  switch ($display['type']) {
    case 'ccpuriri_contactfield_default':

      foreach ($items as $delta => $contact) {

        //$element[$delta] = addressfield_generate($address, $handlers, $context);
      }
      break;
  }

  return $element;
}


function _ccpuriri_contactfield_default_value(){

  $default = array(
      'title' => '',
      'first_name' => '',
      'last_name' => '',
      'mobile' => '',
      'workphone' => '',
      'ahphone' => '',
      'bestway' => '',
      'email' => '',
      'organisation_name' => '',
      'contacttype' => 10,
  );

  return $default;

}

/**
 * Implements hook_field_attach_form().
 */
function ccpuriri_contactfield_field_attach_form($entity_type, $entity, &$form, &$form_state, $langcode) {
  // as only displayed field_state items_count -1 , so #max_delta need to be correct
  // otherwise the add new item button will have trouble

  // there are two ways of implementing attach api
  // one is loop through entity, and get the field
  // another is loop through form element to get the field
  // locating with field type
  
  $entity_info = entity_get_info($entity_type);
  $bundle_name = empty($entity_info['entity keys']['bundle']) ? $entity_type : $entity->{$entity_info['entity keys']['bundle']};
  
  foreach (field_info_instances($entity_type, $bundle_name) as $field_instance) {
    // to get the field
    $field= field_info_field($field_instance['field_name']);
    
    if ($field['type'] == 'ccpuriri_contactfield') {

      // we do not have $langcode, so have to get field a level up
      
      // to get #max_delta
      $parents = array_merge($form['#parents'], array($field['field_name']));
      
      $key_exists = NULL;
      $value = drupal_array_get_nested_value($form, $parents, $key_exists);
      if ($key_exists) {
      
        foreach(element_children($value) as $key)
           
         if(isset($value[$key]['#max_delta']))
         {
            if ($value[$key]['#max_delta']>0)
            {
               $value[$key]['#max_delta']-- ;
             
               $newparents = array_merge($parents,array($key));
               drupal_array_set_nested_value($form, $newparents, $value[$key]);
               
               
            }
           
         }
      
      }
      break;
    }
  }

}







<?php 

/**
 * @file
 * A node module that defines a node type: .
 */
define ('CCPURIRI_RENTAL_STANDARD_ROLE' , 'CCPuriri rental standard user');

/**
 * Implements hook_help.
 *
 * Displays help and module information.
 *
 * @param path
 *   Which path of the site we're using to display help
 * @param arg
 *   Array that holds the current path as returned from arg() function
 */

function ccpuriri_help($path, $arg) {

}



/**
 * @name ccpuriri_meun
 * @{
 */

/*
 *hook_menu_alter
*/
function ccpuriri_menu_alter(&$items)
{
  // user navigation menu
  $items['user']['title callback'] = '_ccpuriri_user_menu_title';

  $items['user/login']['type'] = MENU_NORMAL_ITEM;

  //get the titile back by making it a normal menu item
  // need manual change to move it to top level
  $items['user/register']['type'] = MENU_NORMAL_ITEM;
  $items['user/register']['title'] ='Sign up';


  // must remove original one, it can only have one
  if (array_key_exists('user/%user',$items))
  {
    unset($items['user/%user']);
  }


  if (array_key_exists('user/%user/view',$items))
  {
    unset($items['user/%user/view']);
  }

  if (array_key_exists('user/%user/edit',$items))
  {
    unset($items['user/%user/edit']);
  }
   
  if (array_key_exists('user/%user_category/edit/account',$items))
  {
    unset($items['user/%user_category/edit/account']);
  }

  if (array_key_exists('user/%user/cancel',$items))
  {
    unset($items['user/%user/cancel']);
  }


  // this is the user menu top bar
  // with user/%/account etc as its submenu
  $items['user/%user_uid_optional'] = array(
      'title' => 'My account',
      'weight' => 40,
      'page callback' => 'user_view_page',
      'page arguments' => array(1),
      'access callback' => 'user_view_access',
      'access arguments' => array(1),
      'menu_name' => 'ccpuririmainnavigation',
      'options'=>array(
          'icon'=>'user',
          'html'=>true,
      ),
  );

  $items['user/%user_uid_optional/cancel'] = array(
      'title' => 'Cancel',
      'weight' => 60,
      'page callback' => 'drupal_get_form',
      'page arguments' => array('user_cancel_confirm_form', 1),
      'access callback' => 'user_cancel_access',
      'access arguments' => array(1),
      'menu_name' => 'ccpuririmainnavigation',
      'file' => drupal_get_path('module', 'user').'/user.pages.inc',
  );

  // here for new development to compare with
  // later on set this to admin only
  $items['user/%user_uid_optional/edit'] = array(
      'title' => 'Edit',
      'weight' => 50,
      'page callback' => 'drupal_get_form',
      'page arguments' => array('user_profile_form', 1),
      'access arguments' => array('administer users'),
      'menu_name' => 'ccpuririmainnavigation',
      'file' => drupal_get_path('module', 'user').'/user.pages.inc',
  );
}


/*
 * hook_menu_link_alter, this is perlink
* */
function ccpuriri_menu_link_alter(&$link) {

  // items logged in

  //the menu name change has to be in hook_menu_link_alter
  if ($link['link_path'] == 'user' && $link['module'] == 'system') {
    $link['menu_name'] ='secondary_top';
    $link['weight'] =10;
    $link['options']['icon'] = 'user';
    $link['options']['html'] = true;
    $link['expanded'] = 0; // do not expand on top level
  }

  if ($link['link_path'] == 'user/logout' && $link['module'] == 'system') {

    $link['menu_name'] ='secondary_top';
    $link['weight'] =20;
    $link['options']['icon'] = 'log-out';
    $link['options']['html'] = true;
    $link['plid'] = 0; // move it to top level
  }



  // items for not logged in

  if ($link['link_path'] == 'user/login' && $link['module'] == 'system') {

    $link['weight'] =10;
    $link['menu_name'] ='secondary_top';
    $link['options']['icon'] = 'log-in';
    $link['options']['html'] = true;

    $link['plid'] = 0; // move it to top level
  }

  if ($link['link_path'] == 'user/register' && $link['module'] == 'system') {

    $link['weight'] =15;
    $link['menu_name'] ='secondary_top';
    $link['options']['icon'] = 'cog';
    $link['options']['html'] = true;
    $link['plid'] = 0; // move it to top level
  }


   
}

/**
 * Menu item title callback for the 'user' path.
 *
 * expected to see "Hello user name".
 */
function _ccpuriri_user_menu_title() {
  global $user;
  return 'Hello '.format_username($user);
}


/**
 * Implements hook_menu().
 *
 * We are providing a default page to illustrate the use of our custom node view mode that will
 * live at http://example.com/?q=examples/node_example
 *
 */

function ccpuriri_menu() {

  $items['user/%user_uid_optional/main'] = array(
      'title' => 'Account info',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('ccpuriri_user_account_info_form', 1),
      'access callback' => 'user_edit_access',
      'access arguments' => array(1),
      'menu_name' => 'ccpuririmainnavigation',
      'weight' =>10,
      'file' =>'ccpuriri.user.pages.inc'
  );

  $items['user/%user_uid_optional/picture'] = array(
      'title' => 'Picture',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('ccpuriri_user_picture_form', 1),
      'access callback' => 'user_edit_access',
      'access arguments' => array(1),
      'menu_name' => 'ccpuririmainnavigation',
      'weight' =>30,
      'file' =>'ccpuriri.user.pages.inc'
  );

  $items['user/%user_uid_optional/address'] = array(
      'title' => 'Address',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('ccpuriri_user_address_form', 1),
      'access callback' => 'user_edit_access',
      'access arguments' => array(1),
      'menu_name' => 'ccpuririmainnavigation',
      'weight' =>20,
      'file' =>'ccpuriri.user.pages.inc'
  );

  $items['user/%user_uid_optional/contacts'] = array(
      'title' => 'Contacts',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('ccpuriri_user_contact_form', 1),
      'access callback' => 'user_edit_access',
      'access arguments' => array(1),
      'menu_name' => 'ccpuririmainnavigation',
      'weight' =>20,
      'file' =>'ccpuriri.user.pages.inc'
  );

  $items['admin/config/ccpuriri'] = array(
      'title' => 'Configuation settings for CCPURIRI',
      'description' =>  'Configuation settings',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('ccpuriri_admin_settings'),
      'file' => 'ccpuriri.admin.inc',
      'access arguments' => array('administer site configuration'),
  );

  return $items;
}



/**
 * @} End of "name ccpuriri_menu".
 */


/**
 * @name ccpuriri_block change navigation contents when different mainmenu activated.
 * @{
 */

/**
 * Implements hook_block_info().
 */
function ccpuriri_block_info() {

  $blocks['ccpuriri_navigation'] =array(
      'info' => t('CCPuriri Navigation- add to sidebar first'),
      'region' => 'sidebar_first',
      // Menu blocks can't be cached because each menu item can have
      // a custom access callback. menu.inc manages its own caching.
      'cache' => DRUPAL_NO_CACHE,
  );
   
  return $blocks;

}


/**
 * Implements hook_block_view().
 *
 * Generate a block with a promotional link to Drupal.org and
 * all ccpuriri menu blocks.
 */
function ccpuriri_block_view($delta = '') {

  $block = array();
  switch ($delta) {
    case 'ccpuriri_navigation':
      $block['subject'] = NULL;
      $block['content'] = _ccpuriri_get_navigation();
      return $block;
    default:
      break;
  }
}

function _ccpuriri_get_navigation()
{
  if(user_is_logged_in())
  {
    $tree =  menu_tree_page_data('ccpuririmainnavigation');

    // to get current router item
    $router_item = menu_get_item();

    if (isset($router_item['map']) && count($router_item['map'])>0
        && $router_item['map'][0]=='list' )
    {
      
      // add custom lists
      _ccpuriri_add_user_created_lists($tree);

    }
     
    if (isset($tree) && !empty($tree))
    {
      return  menu_tree_output($tree);
    }
  }
  return '';

}

// this adds user defined lists to the menu tree
// it is highly targeted to theme menu links rendering
// those fields that are not used by rendering function are not bothered
// all it does is to render lists with href and title,
// no need of #localized_options, no icon, no active status.
// when a special user list is live, then it needs to be removed from this list

function  _ccpuriri_add_user_created_lists(&$tree)
{
  // find the list key
  foreach ($tree as $key => $value)
  {
    if ($value['link']['link_path']=='list')
    {
      $listkey = $key;
      break;    
    }
  }
  
  if (!isset($listkey))
  {
    return;
  }
 
  // to get the list
  $userlist= ccpuriri_list_load_user();

  if (isset($userlist) && count($userlist)>0)
  {
    $current_router_item = menu_get_item();

    if (strpos($current_router_item['path'], 'list/%') === 0)
    {
      // to get the current list
      if(isset($current_router_item['map'][1]) &&
          property_exists($current_router_item['map'][1], 'lid'))
      {
        if(!$current_router_item['map'][1]->is_shared)
        {
          $currentlistid = $current_router_item['map'][1]->lid;
           
          // take out the item which is supposed to be list/%
          foreach($tree[$listkey]['below'] as $glistkey => $glistvalue)
          {
            if ($glistvalue['link']['href']=='list/'.$currentlistid)
            {
              $itemmenukey = $glistkey;
              break;
            }
          }
          
          if (isset($itemmenukey))
          {
            $currentmenuitem = $tree[$listkey]['below'][$itemmenukey];
            
            
            unset($tree[$listkey]['below'][$itemmenukey]);
            _ccpuriri_list_tree_add_list($userlist, $tree[$listkey]['below'],
                $currentmenuitem,$itemmenukey, $currentlistid);

            return ;
          }

        }
      }

    }

    // create items for user list
    //current tree is as this
    /*
    $tree	Array [1]
    50010 My Lists 1780	Array [2]
    link	Array [45]
    below	Array [3]
    49910 Watchlist(0) 1786	Array [2]
    49920 Listings(0) 1787	Array [2]
    50000 Add list 1781	Array [2]
    50000 hgt(0) 1782 Array
    */
    // add user lists under list
    _ccpuriri_list_tree_add_list($userlist, $tree[$listkey]['below']);

  }


}

function _ccpuriri_list_tree_add_list($userlist,&$treeref,$currentMenuItem=NULL,$currentMenuKey=NULL,$currentListId=NULL)
{

  $i=-1;

  // attach the items to the end
  foreach ($userlist as $key => $list)
  {

    if ($currentListId!=NULL&&$currentMenuKey!=NULL&&$currentMenuItem!=NULL && $list->lid == $currentListId)
    {

      $treeref[$currentMenuKey] = $currentMenuItem;

    }
    else
    {

      $title =  ccpuriri_list_page_title($list);

      $treeref[$title]=array(
          'link'=> array(
              'mlid'=> $i, // just a fake mlid to be used by array indexing
              'menu_name'=>'ccpuririmainnavigation',
              'title'=> $title,
              'href' => 'list/'.$list->lid,
              'access' =>true,
              'hidden' =>false,
              'has_children'=>false,
              'in_active_trail'=> false,
          ),
          'below' => array(),
      );
    }
    $i--;
  }
}

/**
 * @} End of "name ccpuriri_block".
 */


/**
 * @name ccpuriri_user_xxxx
 * @{
 */

/**
 * Implements hook_user_insert().
 * add new user into role CCPURIRI_RENTAL_STANDARD_ROLE
 */
function ccpuriri_user_insert(&$edit, $account, $category) {

  $roles = user_roles();

  $key = array_search(CCPURIRI_RENTAL_STANDARD_ROLE,$roles);

  if($key)
  {
    //add all authenticated user to CCPURIRI_RENTAL_STANDARD_ROLE
    $account->roles[$key] = CCPURIRI_RENTAL_STANDARD_ROLE;

  }

}

/**
 * @} End of "name ccpuriri_user_insert".
 */




<?php 
/**
 * @file
 * A node module that defines a node type: .
 */


/**
 * Implements hook_help.
 *
 * Displays help and module information.
 *
 * @param path
 *   Which path of the site we're using to display help
 * @param arg
 *   Array that holds the current path as returned from arg() function
 */

function ccpuriri_help($path, $arg) {

}



/**
 * @name ccpuriri_meun 
 * @{
 */

/*
 *hook_menu_alter
*/
function ccpuriri_menu_alter(&$items)
{
  //items when user logged in

 $items['user']['menu_name'] ='secondary_top';
 $items['user']['title callback'] = '_ccpuriri_user_menu_title';
 $items['user']['weight'] =10;
  
  $items['user/logout']['menu_name'] ='secondary_top';
  $items['user/logout']['weight'] =20;
  
  // items for not logged in

  //get the titile back by making it a normal menu item
  // need manual change to move it to top level
  $items['user/login']['type'] = MENU_NORMAL_ITEM;
  $items['user/login']['weight'] =10;
  $items['user/login']['menu_name'] ='secondary_top';

  //get the titile back by making it a normal menu item
  // need manual change to move it to top level
  $items['user/register']['type'] = MENU_NORMAL_ITEM;
  $items['user/register']['title'] ='Sign up';
  $items['user/register']['weight'] =15;
  $items['user/register']['menu_name'] ='secondary_top';

  
  // user navigation menu

  // must remove original one, it can only have one
  if (array_key_exists('user/%user',$items))
  {
    unset($items['user/%user']);
  }
  
  $items['user/%user_uid_optional'] = array(
      'title' => 'My account',
      'page callback' => 'user_view_page',
      'page arguments' => array(1),
      'access callback' => 'user_view_access',
      'access arguments' => array(1),
      'menu_name' => 'ccpuririusernavigation',
      'weight' =>10,
  );
  
  if (array_key_exists('user/%user/view',$items))
  {
    unset($items['user/%user/view']);
  }
  
  if (array_key_exists('user/%user/edit',$items))
  {
    unset($items['user/%user/edit']);
  }
  
  
  
  $items['user/%user_uid_optional/view'] = array(
      'title' => 'View',
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'weight' => -10,
  );
  
  
  $items['user/%user_uid_optional/edit'] = array(
      'title' => 'Edit',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('user_profile_form', 1),
      'access callback' => 'user_edit_access',
      'access arguments' => array(1),
      'file' => drupal_get_path('module', 'user').'/user.pages.inc',
      'type' => MENU_LOCAL_TASK,
      
  );
  
 
  
 
 
}

/**
 * Menu item title callback for the 'user' path.
 *
 * expected to see "Hello user name".
 */
function _ccpuriri_user_menu_title() {
  global $user;
  return 'Hello '.format_username($user);
}


/**
 * Implements hook_menu().
 *
 * We are providing a default page to illustrate the use of our custom node view mode that will
 * live at http://example.com/?q=examples/node_example
 *


 function ccpuriri_menu() {


 }

 */

/**
 * @} End of "name ccpuriri_menu".
 */


/**
 * @name ccpuriri_block change navigation contents when different mainmenu activated.
 * @{
 */

/**
 * Implements hook_block_info().
 */
function ccpuriri_block_info() {

  $blocks['navigation'] =array(
      'info' => t('CCPuriri Navigation'),
      'region' => 'sidebar_first',
      // Menu blocks can't be cached because each menu item can have
      // a custom access callback. menu.inc manages its own caching.
      'cache' => DRUPAL_NO_CACHE,
  );
   
  return $blocks;

}


/**
 * Implements hook_block_view().
 *
 * Generate a block with a promotional link to Drupal.org and
 * all ccpuriri menu blocks.
 */
function ccpuriri_block_view($delta = '') {

  $block = array();
  switch ($delta) {
    case 'navigation':
      $block['subject'] = NULL;
      $block['content'] = _ccpuriri_get_navigation();
      return $block;
    default:
      break;
  }
}

function _ccpuriri_get_navigation()
{
  if(user_is_logged_in())
  {
    // to get current router item
    $router_item = menu_get_item();

    if ($router_item['map'] && count($router_item['map'])>0)
    {
      switch ($router_item['map'][0]) {
        case 'user':
          $tree = menu_tree_page_data('ccpuririusernavigation');
          break;
        default:
          $tree =  menu_tree_page_data('main-menu');
        break;
      }
    }

    return  menu_tree_output($tree);
  }
  return '';

}


/**
 * @} End of "name ccpuriri_block".
 */


/**
 * @name ccpuriri menu change
 * @{
 */

/**
 * Implements hook_menu_link_alter().
 */
function ccpuriri_menu_link_alter(&$link) {

  // add icon to user
  if ($link['link_path'] == 'user/%' || 
     $link['link_path'] == 'user') {
    $link['options']['icon'] = 'icon-user';
    $link['options']['html'] = true;
  } elseif ($link['link_path'] == 'user/logout')
  {
    $link['options']['icon'] = 'icon-signout';
    $link['options']['html'] = true;
  }
  elseif ($link['link_path'] == 'user/login')
  {
    $link['options']['icon'] = 'icon-signin';
    $link['options']['html'] = true;
  }
  elseif ($link['link_path'] == 'user/register')
  {
    $link['options']['icon'] = 'icon-upload-alt';
    $link['options']['html'] = true;
  }

}

/**
 * Implements hook_translated_menu_link_alter().
 */
function ccpuriri_translated_menu_link_alter(&$link) {
  // Hide the "User account" link for anonymous users.
 // if ($link['link_path'] == 'user' && $link['module'] == 'system' && user_is_anonymous()) {
 //   $link['hidden'] = 1;
 // }
}

/**
 * @} End of "name ccpuriri_block".
 */
